import typing, abc
from System.Collections.Generic import IEnumerable_1, List_1
from Aml.Engine.CAEX import CAEXBasicObject, CAEXFileType, InternalElementType, SystemUnitClassType, AttributeType, IObjectWithAttributes, CAEXWrapper, InterfaceClassType, IObjectWithExternalInterface, ExternalReferenceType, ExternalInterfaceType, InterfaceFamilyType, SystemUnitFamilyType, RoleRequirementsType, InstanceHierarchyType, InterfaceClassLibType, IInternalElementContainer, RevisionType, OrdinalScaledTypeType, RoleClassLibType, SystemUnitClassLibType, MappingType, SupportedRoleClassType, NominalScaledTypeType, InternalLinkType
from System.Xml.Linq import XElement

class AMLEngineAdapter(abc.ABC):
    @staticmethod
    def AllElementsWithInternalLinks(caexFile: CAEXFileType) -> IEnumerable_1[CAEXBasicObject]: ...
    @staticmethod
    def AllInternalElementsWithInternalLinks(caexFile: CAEXFileType) -> IEnumerable_1[InternalElementType]: ...
    @staticmethod
    def Ancestors(systemUnitClass: SystemUnitClassType) -> IEnumerable_1[SystemUnitClassType]: ...
    @staticmethod
    def AssignNewGUIDs(element: InternalElementType) -> None: ...
    @staticmethod
    def AssignNewGUIDsAndRedirectExistingInternalLinks(systemUnitClass: SystemUnitClassType, includeSystemUnitClasses: bool = ...) -> None: ...
    @staticmethod
    def AssignNewGUIDsAndRedirectExistingInternalLinksAndMirrorObjects(systemUnitClass: SystemUnitClassType, includeSystemUnitClasses: bool = ...) -> None: ...
    @staticmethod
    def Attributes(systemUnitClass: IObjectWithAttributes) -> IEnumerable_1[AttributeType]: ...
    @staticmethod
    def clone(caexObject: CAEXBasicObject) -> CAEXWrapper: ...
    @staticmethod
    def CloneNode(caexObject: CAEXBasicObject, deepClone: bool, assignNewGuidsToIEs: bool) -> CAEXWrapper: ...
    @staticmethod
    def ConsistencyCheck_ClassReference(caexObject: CAEXBasicObject, classPath: str) -> bool: ...
    @staticmethod
    def Create_UniqueCopy(internalElement: InternalElementType, deepClone: bool) -> InternalElementType: ...
    @staticmethod
    def ExternalInterfaces(systemUnitClass: IObjectWithExternalInterface) -> IEnumerable_1[InterfaceClassType]: ...
    @staticmethod
    def ExternalReferences(caexFile: CAEXFileType) -> IEnumerable_1[ExternalReferenceType]: ...
    @staticmethod
    def findExternalInterface(systemUnitClass: IObjectWithExternalInterface, interfaceName: str) -> ExternalInterfaceType: ...
    @staticmethod
    def findInternalElement(caexObject: CAEXBasicObject, referenceGUID: str) -> InternalElementType: ...
    @staticmethod
    def GetAllElementsWithInternalLinks(caexFile: CAEXFileType) -> List_1[SystemUnitClassType]: ...
    @staticmethod
    def getAttributeField(objectWithAttributes: IObjectWithAttributes) -> IEnumerable_1[AttributeType]: ...
    @staticmethod
    def GetAttributeValue(objWithAttr: IObjectWithAttributes, attName: str) -> str: ...
    @staticmethod
    def GetExternalInterfaces(systemUnitClass: IObjectWithExternalInterface, interfaceName: str) -> IEnumerable_1[InterfaceClassType]: ...
    @staticmethod
    def getLinkedObjects(systemUnitClass: SystemUnitClassType) -> List_1[LinkedObjects]: ...
    @staticmethod
    def GetParent(caexFile: CAEXFileType, obj: CAEXBasicObject) -> CAEXBasicObject: ...
    @staticmethod
    def getReferencedClass(caexObject: CAEXBasicObject, referencedClassPath: str) -> XElement: ...
    @staticmethod
    def getReferencedGUID(caexObject: CAEXBasicObject, reference: str) -> str: ...
    @staticmethod
    def getReferencedInterfaceClass(caexObject: CAEXBasicObject, interfaceClassReference: str) -> InterfaceFamilyType: ...
    @staticmethod
    def getReferencedInterfaceName(caexObject: CAEXBasicObject, reference: str) -> str: ...
    @staticmethod
    def getReferencedSystemUnitClass(element: InternalElementType) -> SystemUnitFamilyType: ...
    @staticmethod
    def Insert_Element(caexObject: CAEXBasicObject, elementToInsert: CAEXWrapper, asFirst: bool = ...) -> bool: ...
    @staticmethod
    def Insert_NewInstance(caexObject: CAEXBasicObject, newInstanceObject: CAEXWrapper, asFirst: bool = ...) -> bool: ...
    @staticmethod
    def Insert_RoleRequirements(internalElement: InternalElementType, roleRequirement: RoleRequirementsType) -> None: ...
    @staticmethod
    def Insert_SystemUnitFamilyType(systemUnitClass: SystemUnitFamilyType, systemUnitFamilyType: SystemUnitFamilyType) -> None: ...
    @staticmethod
    def Insert_TypeBaseElement(caexObject: CAEXBasicObject, elementToInsert: CAEXWrapper, asFirst: bool = ...) -> bool: ...
    @staticmethod
    def InstanceHierarchies(caexFile: CAEXFileType) -> IEnumerable_1[InstanceHierarchyType]: ...
    @staticmethod
    def InterfaceClassLibraries(caexFile: CAEXFileType) -> IEnumerable_1[InterfaceClassLibType]: ...
    @staticmethod
    def InternalElementChildren(systemUnitClass: IInternalElementContainer) -> IEnumerable_1[InternalElementType]: ...
    @staticmethod
    def IsFacet(internalElement: InternalElementType) -> bool: ...
    @staticmethod
    def IsGroup(internalElement: InternalElementType) -> bool: ...
    @staticmethod
    def IsPort(internalElement: InternalElementType) -> bool: ...
    @staticmethod
    def Name(caexObject: CAEXBasicObject) -> str: ...
    @staticmethod
    def New_Comment(revision: RevisionType, value: str) -> None: ...
    @staticmethod
    def New_NewVersion(revision: RevisionType, value: str) -> None: ...
    @staticmethod
    def New_OldVersion(revision: RevisionType, value: str) -> None: ...
    @staticmethod
    def New_RequiredMaxValue(ordinalScaledType: OrdinalScaledTypeType, value: str) -> None: ...
    @staticmethod
    def New_RequiredMinValue(ordinalScaledType: OrdinalScaledTypeType, value: str) -> None: ...
    @staticmethod
    def RoleClassLibraries(caexFile: CAEXFileType) -> IEnumerable_1[RoleClassLibType]: ...
    @staticmethod
    def SystemUnitClassChildren(systemUnitClass: SystemUnitFamilyType) -> IEnumerable_1[SystemUnitFamilyType]: ...
    @staticmethod
    def SystemUnitClassLibraries(caexFile: CAEXFileType) -> IEnumerable_1[SystemUnitClassLibType]: ...
    # Skipped GetClassName due to it being static, abstract and generic.

    GetClassName : GetClassName_MethodGroup
    class GetClassName_MethodGroup:
        @typing.overload
        def __call__(self, internalElement: InternalElementType) -> str:...
        @typing.overload
        def __call__(self, interfaceClass: InterfaceClassType) -> str:...

    # Skipped Insert_MappingObject due to it being static, abstract and generic.

    Insert_MappingObject : Insert_MappingObject_MethodGroup
    class Insert_MappingObject_MethodGroup:
        @typing.overload
        def __call__(self, internalElement: InternalElementType, mappingObject: MappingType) -> None:...
        @typing.overload
        def __call__(self, supportedRoleClass: SupportedRoleClassType, mappingObject: MappingType) -> None:...

    # Skipped New_RequiredValue due to it being static, abstract and generic.

    New_RequiredValue : New_RequiredValue_MethodGroup
    class New_RequiredValue_MethodGroup:
        @typing.overload
        def __call__(self, nominalScaledType: NominalScaledTypeType, value: str) -> None:...
        @typing.overload
        def __call__(self, ordinalScaledType: OrdinalScaledTypeType, value: str) -> None:...

    # Skipped New_RoleRequirements due to it being static, abstract and generic.

    New_RoleRequirements : New_RoleRequirements_MethodGroup
    class New_RoleRequirements_MethodGroup:
        @typing.overload
        def __call__(self, internalElement: InternalElementType) -> RoleRequirementsType:...
        @typing.overload
        def __call__(self, internalElement: InternalElementType, roleClassPath: str) -> RoleRequirementsType:...



class LinkedObjects:
    def __init__(self, internalLink: InternalLinkType) -> None: ...
    @property
    def InternalLink(self) -> InternalLinkType: ...
    @InternalLink.setter
    def InternalLink(self, value: InternalLinkType) -> InternalLinkType: ...
    @property
    def RefPartnerSideAElement(self) -> SystemUnitClassType: ...
    @property
    def RefPartnerSideAExternalInterface(self) -> ExternalInterfaceType: ...
    @RefPartnerSideAExternalInterface.setter
    def RefPartnerSideAExternalInterface(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
    @property
    def RefPartnerSideBElement(self) -> SystemUnitClassType: ...
    @property
    def RefPartnerSideBExternalInterface(self) -> ExternalInterfaceType: ...
    @RefPartnerSideBExternalInterface.setter
    def RefPartnerSideBExternalInterface(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
    def ToString(self) -> str: ...


import typing
from System.Collections.Generic import List_1, IEnumerable_1
from System.Text.Json.Serialization import IJsonOnDeserialized
from System.IO import Stream
from System import ValueTuple_2, Version

class ISignedLibraryVersion(typing.Protocol):
    @property
    def DownloadLink(self) -> str: ...
    @DownloadLink.setter
    def DownloadLink(self, value: str) -> str: ...
    @property
    def DownloadLinks(self) -> List_1[str]: ...
    @DownloadLinks.setter
    def DownloadLinks(self, value: List_1[str]) -> List_1[str]: ...
    @property
    def Revision(self) -> PublicLibraryCatalog.LibraryRevision: ...
    @Revision.setter
    def Revision(self, value: PublicLibraryCatalog.LibraryRevision) -> PublicLibraryCatalog.LibraryRevision: ...
    @property
    def Signature(self) -> str: ...
    @Signature.setter
    def Signature(self, value: str) -> str: ...


class PublicLibraryCatalog(IJsonOnDeserialized):
    def __init__(self) -> None: ...
    @property
    def Item(self) -> PublicLibraryCatalog.LibraryType: ...
    @property
    def Item(self) -> PublicLibraryCatalog.Library: ...
    @property
    def Libraries(self) -> List_1[PublicLibraryCatalog.LibraryType]: ...
    @Libraries.setter
    def Libraries(self, value: List_1[PublicLibraryCatalog.LibraryType]) -> List_1[PublicLibraryCatalog.LibraryType]: ...
    @property
    def PublicKey(self) -> str: ...
    @PublicKey.setter
    def PublicKey(self, value: str) -> str: ...
    def GetPublishedLibraryVersion(self, libraryName: str, libraryVersion: str, libraryType: str, CAEXVersion: str) -> PublicLibraryCatalog.LibraryVersion: ...
    def LibraryVersionIsListed(self, tagName: str, libraryName: str, version: str, caexVersion: str) -> bool: ...
    def LibVersion(self, tagName: str, libraryName: str, version: str, caexVersion: str) -> PublicLibraryCatalog.LibraryVersion: ...
    def Save(self, filePath: str) -> None: ...
    def SerializeToStream(self) -> Stream: ...

    class Library:
        def __init__(self) -> None: ...
        @property
        def Item(self) -> PublicLibraryCatalog.LibraryVersion: ...
        @property
        def Name(self) -> str: ...
        @Name.setter
        def Name(self, value: str) -> str: ...
        @property
        def Versions(self) -> List_1[PublicLibraryCatalog.LibraryVersion]: ...
        @Versions.setter
        def Versions(self, value: List_1[PublicLibraryCatalog.LibraryVersion]) -> List_1[PublicLibraryCatalog.LibraryVersion]: ...
        def HighestVersion(self, caexVersion: str) -> PublicLibraryCatalog.LibraryVersion: ...


    class LibraryRevision(ISignedLibraryVersion):
        def __init__(self) -> None: ...
        @property
        def DownloadLink(self) -> str: ...
        @DownloadLink.setter
        def DownloadLink(self, value: str) -> str: ...
        @property
        def DownloadLinks(self) -> List_1[str]: ...
        @DownloadLinks.setter
        def DownloadLinks(self, value: List_1[str]) -> List_1[str]: ...
        @property
        def RelatedLibraryVersion(self) -> PublicLibraryCatalog.LibraryVersion: ...
        @RelatedLibraryVersion.setter
        def RelatedLibraryVersion(self, value: PublicLibraryCatalog.LibraryVersion) -> PublicLibraryCatalog.LibraryVersion: ...
        @property
        def Revision(self) -> PublicLibraryCatalog.LibraryRevision: ...
        @Revision.setter
        def Revision(self, value: PublicLibraryCatalog.LibraryRevision) -> PublicLibraryCatalog.LibraryRevision: ...
        @property
        def Signature(self) -> str: ...
        @Signature.setter
        def Signature(self, value: str) -> str: ...


    class LibraryType:
        def __init__(self) -> None: ...
        @property
        def CAEXType(self) -> str: ...
        @CAEXType.setter
        def CAEXType(self, value: str) -> str: ...
        @property
        def Item(self) -> PublicLibraryCatalog.Library: ...
        @property
        def Libraries(self) -> List_1[PublicLibraryCatalog.Library]: ...
        @Libraries.setter
        def Libraries(self, value: List_1[PublicLibraryCatalog.Library]) -> List_1[PublicLibraryCatalog.Library]: ...


    class LibraryVersion(ISignedLibraryVersion):
        def __init__(self) -> None: ...
        @property
        def AllDownloadLinks(self) -> IEnumerable_1[ValueTuple_2[str, ISignedLibraryVersion]]: ...
        @property
        def AMLEdition(self) -> str: ...
        @AMLEdition.setter
        def AMLEdition(self, value: str) -> str: ...
        @property
        def CAEXVersion(self) -> str: ...
        @CAEXVersion.setter
        def CAEXVersion(self, value: str) -> str: ...
        @property
        def Description(self) -> str: ...
        @Description.setter
        def Description(self, value: str) -> str: ...
        @property
        def DownloadLink(self) -> str: ...
        @DownloadLink.setter
        def DownloadLink(self, value: str) -> str: ...
        @property
        def DownloadLinks(self) -> List_1[str]: ...
        @DownloadLinks.setter
        def DownloadLinks(self, value: List_1[str]) -> List_1[str]: ...
        @property
        def Library(self) -> PublicLibraryCatalog.Library: ...
        @Library.setter
        def Library(self, value: PublicLibraryCatalog.Library) -> PublicLibraryCatalog.Library: ...
        @property
        def NetVersion(self) -> Version: ...
        @property
        def Revision(self) -> PublicLibraryCatalog.LibraryRevision: ...
        @Revision.setter
        def Revision(self, value: PublicLibraryCatalog.LibraryRevision) -> PublicLibraryCatalog.LibraryRevision: ...
        @property
        def Signature(self) -> str: ...
        @Signature.setter
        def Signature(self, value: str) -> str: ...
        @property
        def Sources(self) -> str: ...
        @Sources.setter
        def Sources(self, value: str) -> str: ...
        @property
        def Version(self) -> str: ...
        @Version.setter
        def Version(self, value: str) -> str: ...
        def AddSource(self, fileName: str) -> None: ...



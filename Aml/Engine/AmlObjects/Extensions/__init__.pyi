import typing, abc
from Aml.Engine.AmlObjects import ObjectWithAMLAttributes, AMLFacet, AMLFile, AMLGroup, AMLPort, AMLSystemUnitClass, FrameAttributeType, FrameValues, RefTypeAttributeType, RefURIAttributeType, MetaInformation
from Aml.Engine.CAEX import IObjectWithAttributes, InternalElementType, CAEXFileType, SystemUnitClassType, ICAEXWrapper, AttributeType, ExternalInterfaceType, CAEXDocument, SourceDocumentInformationType
from System import DateTime
from System.Collections.Generic import IEnumerable_1

class AmlObjectsExtensions(abc.ABC):
    @staticmethod
    def AMLAttributes(caexObject: IObjectWithAttributes) -> ObjectWithAMLAttributes: ...
    @staticmethod
    def AMLFacet(internalElement: InternalElementType) -> AMLFacet: ...
    @staticmethod
    def AMLFile(caexFile: CAEXFileType) -> AMLFile: ...
    @staticmethod
    def AMLGroup(internalElement: InternalElementType) -> AMLGroup: ...
    @staticmethod
    def AMLPort(internalElement: InternalElementType) -> AMLPort: ...
    @staticmethod
    def AMLSystemUnitClass(systemUnitClass: SystemUnitClassType) -> AMLSystemUnitClass: ...
    @staticmethod
    def ClearMetaInformation(caexFile: CAEXFileType) -> None: ...
    @staticmethod
    def DeleteMetaInformation(caexFile: CAEXFileType, writerID: str) -> bool: ...
    @staticmethod
    def FrameAttribute(caexObject: IObjectWithAttributes) -> FrameAttributeType: ...
    @staticmethod
    def IsAMLFacet(internalElement: InternalElementType) -> bool: ...
    @staticmethod
    def IsAMLGroup(internalElement: InternalElementType) -> bool: ...
    @staticmethod
    def IsAMLObject(caexObject: ICAEXWrapper) -> bool: ...
    @staticmethod
    def IsAMLPort(internalElement: InternalElementType) -> bool: ...
    @staticmethod
    def IsFacetAttribute(facetAttribute: AttributeType) -> bool: ...
    @staticmethod
    def IsFacetInterface(facetInterface: ExternalInterfaceType) -> bool: ...
    @staticmethod
    def IsRefTypeAttribute(attribute: AttributeType) -> bool: ...
    @staticmethod
    def IsRefURIAttribute(attribute: AttributeType) -> bool: ...
    @staticmethod
    def New_FrameAttribute(caexObject: IObjectWithAttributes, frameValues: FrameValues = ...) -> FrameAttributeType: ...
    @staticmethod
    def RefTypeAttribute(objectWithAttributes: IObjectWithAttributes) -> RefTypeAttributeType: ...
    @staticmethod
    def RefURIAttribute(objectWithAttributes: IObjectWithAttributes) -> RefURIAttributeType: ...
    @staticmethod
    def ReplaceMetaInformation(caexFile: CAEXFileType, oldWriterID: str, newMetainformation: MetaInformation) -> bool: ...
    @staticmethod
    def SetMetaInformationStandardAutomationMLLibrary(caexFile: CAEXFileType) -> None: ...
    @staticmethod
    def SetSourceDocumentInformation(caexFile: CAEXFileType, originName: str, originID: str, originVendor: str, originVendorURL: str, originVersion: str, originRelease: str, lastWritingDateTime: DateTime, originProjectTitle: str, originProjectID: str) -> None: ...
    @staticmethod
    def ToRefTypeAttribute(attribute: AttributeType) -> RefTypeAttributeType: ...
    @staticmethod
    def ToRefURIAttribute(attribute: AttributeType) -> RefURIAttributeType: ...
    # Skipped AutomationMLVersion due to it being static, abstract and generic.

    AutomationMLVersion : AutomationMLVersion_MethodGroup
    class AutomationMLVersion_MethodGroup:
        @typing.overload
        def __call__(self, caexFile: CAEXFileType) -> str:...
        @typing.overload
        def __call__(self, document: CAEXDocument) -> str:...

    # Skipped GetMetaInformation due to it being static, abstract and generic.

    GetMetaInformation : GetMetaInformation_MethodGroup
    class GetMetaInformation_MethodGroup:
        @typing.overload
        def __call__(self, caexFile: CAEXFileType) -> IEnumerable_1[MetaInformation]:...
        @typing.overload
        def __call__(self, caexFile: CAEXFileType, writerID: str) -> MetaInformation:...

    # Skipped SetMetaInformation due to it being static, abstract and generic.

    SetMetaInformation : SetMetaInformation_MethodGroup
    class SetMetaInformation_MethodGroup:
        @typing.overload
        def __call__(self, caexFile: CAEXFileType, metaInformation: MetaInformation) -> None:...
        @typing.overload
        def __call__(self, sourceDocumentInformation: SourceDocumentInformationType, metaInformation: MetaInformation) -> None:...
        @typing.overload
        def __call__(self, caexFile: CAEXFileType, writerName: str, writerID: str, writerVendor: str, writerVendorURL: str, writerVersion: str, writerRelease: str, lastWritingDateTime: str, writerProjectTitle: str, writerProjectID: str) -> None:...



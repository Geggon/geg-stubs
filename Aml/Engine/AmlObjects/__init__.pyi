import typing, clr, abc
from Aml.Engine.CAEX import InternalElementType, ValueSequence_1, AttributeSequence, AttributeType, CAEXDocument, CAEXWrapper, ICAEXSequence, ChangeMode, CopyrightType, DescriptionType, ExternalInterfaceSequence, ExternalInterfaceType, InternalElementSequence, CAEXSequenceOfCAEXObjects_1, InternalLinkType, MappingType, SystemUnitClassType, CAEXSequence_1, RevisionType, IObjectWithRoleReference, RoleRequirementsType, RoleFamilyType, SourceObjectInformationType, SupportedRoleClassType, SystemUnitFamilyType, VersionType, ICAEXWrapper, CAEXFileType, AttributeTypeLibType, ExternalReferenceType, InstanceHierarchyType, InterfaceClassLibType, RoleClassLibType, SourceDocumentInformationType, SystemUnitClassLibType, CAEXLibrary_1, AttributeTypeType, AttributeFamilyType, IAttributeTypeContainer, CAEXSequenceOfCAEXObjectsWithReference_1, IRoleClassContainer, InterfaceClassType, InterfaceFamilyType, IInterfaceClassContainer, CAEXObject, IObjectWithAttributes, AttributeValueRequirementType, RefSemanticType
from System.Xml.Linq import XElement, XDocument, XName
from System.Collections.Generic import IEnumerable_1, List_1
from System import Version, DateTime, Func_2, ValueTuple_3, Uri, IComparable_1, IDisposable
from System.IO import FileMode, FileAccess, FileShare, Stream, DirectoryInfo
from System.IO.Packaging import CompressionOption, Package, PackagePart, PackageRelationship
from Aml.Engine.Services.Model import XMLSignature
from System.Globalization import NumberFormatInfo
from Aml.Engine.CAEX.Extensions import CaexValue
from System.ComponentModel import INotifyPropertyChanged

class AMLFacet(InternalElementType):
    def __init__(self, internalElementNode: XElement) -> None: ...
    FacetName : str
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalInterface(self) -> ExternalInterfaceSequence: ...
    @property
    def ExternalInterfaceAndDescendants(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def FacetAttribute(self) -> FacetAttributeSequence: ...
    @property
    def FacetExternalInterface(self) -> FacetExternalInterfaceSequence: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @classmethod
    @property
    def InternalElement(cls) -> InternalElementSequence: ...
    @property
    def InternalElement(self) -> InternalElementSequence: ...
    @property
    def InternalLink(self) -> CAEXSequenceOfCAEXObjects_1[InternalLinkType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsFacet(self) -> bool: ...
    @property
    def IsMirror(self) -> bool: ...
    @property
    def MappingObject(self) -> MappingType: ...
    @property
    def Master(self) -> InternalElementType: ...
    @Master.setter
    def Master(self, value: InternalElementType) -> InternalElementType: ...
    @property
    def MasterID(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefBaseSystemUnitPath(self) -> str: ...
    @RefBaseSystemUnitPath.setter
    def RefBaseSystemUnitPath(self, value: str) -> str: ...
    @property
    def Reference(self) -> SystemUnitClassType: ...
    @Reference.setter
    def Reference(self, value: SystemUnitClassType) -> SystemUnitClassType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleReferences(self) -> IEnumerable_1[IObjectWithRoleReference]: ...
    @property
    def RoleRequirements(self) -> CAEXSequence_1[RoleRequirementsType]: ...
    @property
    def Roles(self) -> IEnumerable_1[RoleFamilyType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def SupportedRoleClass(self) -> CAEXSequence_1[SupportedRoleClassType]: ...
    @property
    def SystemUnitClass(self) -> SystemUnitFamilyType: ...
    @SystemUnitClass.setter
    def SystemUnitClass(self, value: SystemUnitFamilyType) -> SystemUnitFamilyType: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def AssignedParentAttributes(self) -> IEnumerable_1[AttributeType]: ...
    def AssignedParentInterfaces(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    @staticmethod
    def Create(document: CAEXDocument, name: str, alias: str = ...) -> AMLFacet: ...
    def HasAttributeOfParent(self, attribute: AttributeType) -> bool: ...
    def HasInterfaceOfParent(self, externalInterface: ExternalInterfaceType) -> bool: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    def Insert(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool: ...
    def NotAssignedParentAttributes(self) -> IEnumerable_1[AttributeType]: ...
    def NotAssignedParentInterfaces(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    # Operator not supported op_Implicit(facet: AMLFacet)
    def SourceAttribute(self, facetAttribute: AttributeType) -> AttributeType: ...
    def SourceInterface(self, facetInterface: ExternalInterfaceType) -> ExternalInterfaceType: ...


class AMLFile(CAEXFileType):
    def __init__(self, node: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def AttributeTypeLib(self) -> CAEXSequenceOfCAEXObjects_1[AttributeTypeLibType]: ...
    @property
    def AutomationMLVersion(self) -> str: ...
    @AutomationMLVersion.setter
    def AutomationMLVersion(self, value: str) -> str: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def DocumentVersion(self) -> ValueSequence_1[DocumentVersionInformation]: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalReference(self) -> CAEXSequence_1[ExternalReferenceType]: ...
    @property
    def FileName(self) -> str: ...
    @FileName.setter
    def FileName(self, value: str) -> str: ...
    @property
    def GenericAdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def InstanceHierarchy(self) -> CAEXSequenceOfCAEXObjects_1[InstanceHierarchyType]: ...
    @property
    def InterfaceClassLib(self) -> CAEXSequenceOfCAEXObjects_1[InterfaceClassLibType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def MaximalAMLVersion(self) -> Version: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleClassLib(self) -> CAEXSequenceOfCAEXObjects_1[RoleClassLibType]: ...
    @property
    def SchemaLocation(self) -> str: ...
    @SchemaLocation.setter
    def SchemaLocation(self, value: str) -> str: ...
    @property
    def SchemaVersion(self) -> str: ...
    @SchemaVersion.setter
    def SchemaVersion(self, value: str) -> str: ...
    @property
    def SourceDocumentInformation(self) -> CAEXSequence_1[SourceDocumentInformationType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def SuperiorStandardVersion(self) -> ValueSequence_1[str]: ...
    @property
    def SystemUnitClassLib(self) -> CAEXSequenceOfCAEXObjects_1[SystemUnitClassLibType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    @property
    def WriterHeader(self) -> ValueSequence_1[MetaInformation]: ...
    def ClearMetaInformation(self) -> None: ...
    def DeleteMetaInformation(self, writerID: str) -> bool: ...
    @staticmethod
    def IsAutomationMLVersion(element: XElement) -> bool: ...
    @staticmethod
    def IsDocumentVersion(element: XElement) -> bool: ...
    def IsGenericAdditionalInformation(self, element: XElement) -> bool: ...
    def IsValidAutomationMLVersion(self, amlVersion: str) -> bool: ...
    def IsWriterHeader(self, element: XElement) -> bool: ...
    def ReplaceMetaInformation(self, oldWriterID: str, newMetainformation: MetaInformation) -> bool: ...
    def SetMetaInformationStandardAutomationMLLibrary(self) -> None: ...
    def SetSourceDocumentInformation(self, originName: str, originID: str, originVendor: str, originVendorURL: str, originVersion: str, originRelease: str, lastWritingDateTime: DateTime, originProjectTitle: str, originProjectID: str) -> None: ...
    # Skipped GetMetaInformation due to it being static, abstract and generic.

    GetMetaInformation : GetMetaInformation_MethodGroup
    class GetMetaInformation_MethodGroup:
        @typing.overload
        def __call__(self) -> IEnumerable_1[MetaInformation]:...
        @typing.overload
        def __call__(self, writerID: str) -> MetaInformation:...

    # Skipped SetMetaInformation due to it being static, abstract and generic.

    SetMetaInformation : SetMetaInformation_MethodGroup
    class SetMetaInformation_MethodGroup:
        @typing.overload
        def __call__(self, metaInformation: MetaInformation) -> None:...
        @typing.overload
        def __call__(self, writerName: str, writerID: str, writerVendor: str, writerVendorURL: str, writerVersion: str, writerRelease: str, lastWritingDateTime: str, writerProjectTitle: str, writerProjectID: str) -> None:...



class AMLGroup(InternalElementType):
    def __init__(self, internalElementNode: XElement) -> None: ...
    GroupName : str
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def AMLGroupInternalElement(self) -> AMLGroupInternalElementSequence: ...
    @property
    def AssociatedFacet(self) -> str: ...
    @AssociatedFacet.setter
    def AssociatedFacet(self, value: str) -> str: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalInterface(self) -> ExternalInterfaceSequence: ...
    @property
    def ExternalInterfaceAndDescendants(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def InternalElement(self) -> InternalElementSequence: ...
    @property
    def InternalLink(self) -> CAEXSequenceOfCAEXObjects_1[InternalLinkType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsGroup(self) -> bool: ...
    @property
    def IsMirror(self) -> bool: ...
    @property
    def MappingObject(self) -> MappingType: ...
    @property
    def Master(self) -> InternalElementType: ...
    @Master.setter
    def Master(self, value: InternalElementType) -> InternalElementType: ...
    @property
    def MasterID(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefBaseSystemUnitPath(self) -> str: ...
    @RefBaseSystemUnitPath.setter
    def RefBaseSystemUnitPath(self, value: str) -> str: ...
    @property
    def Reference(self) -> SystemUnitClassType: ...
    @Reference.setter
    def Reference(self, value: SystemUnitClassType) -> SystemUnitClassType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleReferences(self) -> IEnumerable_1[IObjectWithRoleReference]: ...
    @property
    def RoleRequirements(self) -> CAEXSequence_1[RoleRequirementsType]: ...
    @property
    def Roles(self) -> IEnumerable_1[RoleFamilyType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def SupportedRoleClass(self) -> CAEXSequence_1[SupportedRoleClassType]: ...
    @property
    def SystemUnitClass(self) -> SystemUnitFamilyType: ...
    @SystemUnitClass.setter
    def SystemUnitClass(self, value: SystemUnitFamilyType) -> SystemUnitFamilyType: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def AssociableFacets(self) -> IEnumerable_1[str]: ...
    def AssociableFacetsOfMirrorElements(self) -> IEnumerable_1[AMLFacet]: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    @staticmethod
    def Create(document: CAEXDocument, name: str, alias: str = ...) -> AMLGroup: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    def Insert(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool: ...


class AMLGroupInternalElementSequence(InternalElementSequence):
    def __init__(self, owner: XElement, create: Func_2[XElement, InternalElementType]) -> None: ...
    @property
    def CAEXOwner(self) -> CAEXWrapper: ...
    @property
    def Count(self) -> int: ...
    @property
    def ElementName(self) -> XName: ...
    @ElementName.setter
    def ElementName(self, value: XName) -> XName: ...
    @property
    def Elements(self) -> IEnumerable_1[XElement]: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def First(self) -> InternalElementType: ...
    @property
    def IsOwnerDefined(self) -> bool: ...
    @property
    def Item(self) -> InternalElementType: ...
    @property
    def Item(self) -> InternalElementType: ...
    @property
    def Item(self) -> InternalElementType: ...
    @Item.setter
    def Item(self, value: InternalElementType) -> InternalElementType: ...
    @property
    def Item(self) -> InternalElementType: ...
    @property
    def Last(self) -> InternalElementType: ...
    @property
    def Owner(self) -> XElement: ...
    def Insert(self, internalElement: InternalElementType, asFirst: bool = ...) -> InternalElementType: ...


class AMLInternalElementType(AMLSystemUnitClass):
    def __init__(self, systemUnitClassNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def AMLFacets(self) -> IEnumerable_1[AMLFacet]: ...
    @property
    def AMLGroups(self) -> IEnumerable_1[AMLGroup]: ...
    @property
    def AMLPorts(self) -> IEnumerable_1[AMLPort]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalInterface(self) -> ExternalInterfaceSequence: ...
    @property
    def ExternalInterfaceAndDescendants(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def InternalElement(self) -> InternalElementSequence: ...
    @property
    def InternalLink(self) -> CAEXSequenceOfCAEXObjects_1[InternalLinkType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Reference(self) -> SystemUnitClassType: ...
    @Reference.setter
    def Reference(self, value: SystemUnitClassType) -> SystemUnitClassType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleReferences(self) -> IEnumerable_1[IObjectWithRoleReference]: ...
    @property
    def Roles(self) -> IEnumerable_1[RoleFamilyType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def SupportedRoleClass(self) -> CAEXSequence_1[SupportedRoleClassType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...


class AMLLibraryType_GenericClasses(abc.ABCMeta):
    Generic_AMLLibraryType_GenericClasses_AMLLibraryType_1_T = typing.TypeVar('Generic_AMLLibraryType_GenericClasses_AMLLibraryType_1_T')
    def __getitem__(self, types : typing.Type[Generic_AMLLibraryType_GenericClasses_AMLLibraryType_1_T]) -> typing.Type[AMLLibraryType_1[Generic_AMLLibraryType_GenericClasses_AMLLibraryType_1_T]]: ...

AMLLibraryType : AMLLibraryType_GenericClasses

AMLLibraryType_1_T = typing.TypeVar('AMLLibraryType_1_T')
class AMLLibraryType_1(typing.Generic[AMLLibraryType_1_T], CAEXLibrary_1[AMLLibraryType_1_T]):
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Item(self) -> AMLLibraryType_1_T: ...
    @property
    def Item(self) -> AMLLibraryType_1_T: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def AutomationMLClass(self, caexPath: str) -> AMLLibraryType_1_T: ...


class AMLPort(InternalElementType):
    def __init__(self, internalElementNode: XElement) -> None: ...
    PortName : str
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalInterface(self) -> ExternalInterfaceSequence: ...
    @property
    def ExternalInterfaceAndDescendants(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @classmethod
    @property
    def InternalElement(cls) -> InternalElementSequence: ...
    @property
    def InternalElement(self) -> InternalElementSequence: ...
    @property
    def InternalLink(self) -> CAEXSequenceOfCAEXObjects_1[InternalLinkType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsMirror(self) -> bool: ...
    @property
    def IsPort(self) -> bool: ...
    @property
    def MappingObject(self) -> MappingType: ...
    @property
    def Master(self) -> InternalElementType: ...
    @Master.setter
    def Master(self, value: InternalElementType) -> InternalElementType: ...
    @property
    def MasterID(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefBaseSystemUnitPath(self) -> str: ...
    @RefBaseSystemUnitPath.setter
    def RefBaseSystemUnitPath(self, value: str) -> str: ...
    @property
    def Reference(self) -> SystemUnitClassType: ...
    @Reference.setter
    def Reference(self, value: SystemUnitClassType) -> SystemUnitClassType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleReferences(self) -> IEnumerable_1[IObjectWithRoleReference]: ...
    @property
    def RoleRequirements(self) -> CAEXSequence_1[RoleRequirementsType]: ...
    @property
    def Roles(self) -> IEnumerable_1[RoleFamilyType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def SupportedRoleClass(self) -> CAEXSequence_1[SupportedRoleClassType]: ...
    @property
    def SystemUnitClass(self) -> SystemUnitFamilyType: ...
    @SystemUnitClass.setter
    def SystemUnitClass(self, value: SystemUnitFamilyType) -> SystemUnitFamilyType: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    @staticmethod
    def Create(document: CAEXDocument, name: str, alias: str = ...) -> AMLPort: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    def Insert(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool: ...


class AMLSystemUnitClass(SystemUnitClassType):
    @typing.overload
    def __init__(self, systemUnitClass: SystemUnitClassType) -> None: ...
    @typing.overload
    def __init__(self, systemUnitClassNode: XElement, refName: str) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def AMLFacets(self) -> IEnumerable_1[AMLFacet]: ...
    @property
    def AMLGroups(self) -> IEnumerable_1[AMLGroup]: ...
    @property
    def AMLPorts(self) -> IEnumerable_1[AMLPort]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalInterface(self) -> ExternalInterfaceSequence: ...
    @property
    def ExternalInterfaceAndDescendants(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def InternalElement(self) -> InternalElementSequence: ...
    @property
    def InternalLink(self) -> CAEXSequenceOfCAEXObjects_1[InternalLinkType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Reference(self) -> SystemUnitClassType: ...
    @Reference.setter
    def Reference(self, value: SystemUnitClassType) -> SystemUnitClassType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleReferences(self) -> IEnumerable_1[IObjectWithRoleReference]: ...
    @property
    def Roles(self) -> IEnumerable_1[RoleFamilyType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def SupportedRoleClass(self) -> CAEXSequence_1[SupportedRoleClassType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def AddFacet(self, name: str) -> AMLFacet: ...
    def AddGroup(self, name: str) -> AMLGroup: ...
    def AddPort(self, name: str) -> AMLPort: ...


class AMLSystemUnitFamilyType(AMLSystemUnitClass):
    def __init__(self, systemUnitClassNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def AMLFacets(self) -> IEnumerable_1[AMLFacet]: ...
    @property
    def AMLGroups(self) -> IEnumerable_1[AMLGroup]: ...
    @property
    def AMLPorts(self) -> IEnumerable_1[AMLPort]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalInterface(self) -> ExternalInterfaceSequence: ...
    @property
    def ExternalInterfaceAndDescendants(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def InternalElement(self) -> InternalElementSequence: ...
    @property
    def InternalLink(self) -> CAEXSequenceOfCAEXObjects_1[InternalLinkType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Reference(self) -> SystemUnitClassType: ...
    @Reference.setter
    def Reference(self, value: SystemUnitClassType) -> SystemUnitClassType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleReferences(self) -> IEnumerable_1[IObjectWithRoleReference]: ...
    @property
    def Roles(self) -> IEnumerable_1[RoleFamilyType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def SupportedRoleClass(self) -> CAEXSequence_1[SupportedRoleClassType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...


class AutomationMLBaseAttributeTypeLib(abc.ABC):
    AssociatedExternalValue : str
    AssociatedFacet : str
    AutomationMLBaseAttributeTypeLibName : str
    Cardinality : str
    Category : str
    Direction : str
    DocLang : str
    Frame : str
    ListType : str
    LocalizedAttribute : str
    MaxOccurrenceAttribute : str
    MIMEType : str
    MinOccurrenceAttribute : str
    OrderedListType : str
    RefURI : str
    @staticmethod
    def AddAutomationMLBaseAttributeTypeLib(caexDocument: CAEXDocument) -> AutomationMLBaseAttributeTypeLibType: ...
    @staticmethod
    def IsAssociatedExternalValue(attribute: AttributeTypeType) -> bool: ...
    @staticmethod
    def IsAssociatedFacet(attribute: AttributeTypeType) -> bool: ...
    @staticmethod
    def IsCardinality(attribute: AttributeTypeType) -> bool: ...
    @staticmethod
    def IsCategory(attribute: AttributeTypeType) -> bool: ...
    @staticmethod
    def IsDirection(attribute: AttributeTypeType) -> bool: ...
    @staticmethod
    def IsDocLang(attribute: AttributeTypeType) -> bool: ...
    @staticmethod
    def IsFrame(attribute: AttributeTypeType) -> bool: ...
    @staticmethod
    def IsListType(attribute: AttributeTypeType) -> bool: ...
    @staticmethod
    def IsLocalizedAttribute(attribute: AttributeTypeType) -> bool: ...
    @staticmethod
    def IsMIMEType(attribute: AttributeTypeType) -> bool: ...
    @staticmethod
    def IsOrderedListType(attribute: AttributeTypeType) -> bool: ...
    @staticmethod
    def IsRefUri(attribute: AttributeTypeType) -> bool: ...


class AutomationMLBaseAttributeTypeLibType(AMLLibraryType_1[AttributeFamilyType], IAttributeTypeContainer):
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def AssociatedExternalValue(self) -> AttributeFamilyType: ...
    @property
    def AssociatedFacet(self) -> AttributeFamilyType: ...
    @property
    def AttributeType(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[AttributeFamilyType]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def Cardinality(self) -> AttributeFamilyType: ...
    @property
    def Category(self) -> AttributeFamilyType: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Direction(self) -> AttributeFamilyType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Item(self) -> AttributeFamilyType: ...
    @property
    def Item(self) -> AttributeFamilyType: ...
    @property
    def ListType(self) -> AttributeFamilyType: ...
    @property
    def LocalizedAttribute(self) -> AttributeFamilyType: ...
    @property
    def MIMEType(self) -> AttributeFamilyType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def OrderedListType(self) -> AttributeFamilyType: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefURI(self) -> AttributeFamilyType: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    @staticmethod
    def AttributeTypeLib(document: CAEXDocument) -> AutomationMLBaseAttributeTypeLibType: ...
    @staticmethod
    def IsLoaded(document: CAEXDocument) -> bool: ...


class AutomationMLBaseRoleClassLib(abc.ABC):
    AutomationMLBaseRole : str
    AutomationMLBaseRoleClassLibName : str
    Facet : str
    Frame : str
    Group : str
    InterlockingSourceGroup : str
    InterlockingTargetGroup : str
    LogicObject : str
    Port : str
    Process : str
    ProcessStructure : str
    Product : str
    ProductStructure : str
    PropertySet : str
    Resource : str
    ResourceStructure : str
    Structure : str
    @staticmethod
    def AddAutomationMLBaseRoleClassLib(caexDocument: CAEXDocument) -> AutomationMLBaseRoleClassLibType: ...
    @staticmethod
    def IsAutomationMLBaseRole(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def IsFacet(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def IsFrame(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def IsGroup(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def IsInterlockingSourceGroup(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def IsInterlockingTargetGroup(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def IsLogicObject(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def IsPort(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def IsProcess(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def IsProcessStructure(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def IsProduct(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def IsProductStructure(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def IsPropertySet(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def IsResource(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def IsResourceStructure(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def IsStructure(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def MakeAutomationMLBaseRole(usedRole: IObjectWithRoleReference, alias: str = ...) -> None: ...
    @staticmethod
    def MakeFacet(usedRole: IObjectWithRoleReference, alias: str = ...) -> None: ...
    @staticmethod
    def MakeGroup(usedRole: IObjectWithRoleReference, alias: str = ...) -> None: ...
    @staticmethod
    def MakePort(usedRole: IObjectWithRoleReference, alias: str = ...) -> None: ...
    @staticmethod
    def MakeProcess(usedRole: IObjectWithRoleReference, alias: str = ...) -> None: ...
    @staticmethod
    def MakeProcessStructure(usedRole: IObjectWithRoleReference, alias: str = ...) -> None: ...
    @staticmethod
    def MakeProduct(usedRole: IObjectWithRoleReference, alias: str = ...) -> None: ...
    @staticmethod
    def MakeProductStructure(usedRole: IObjectWithRoleReference, alias: str = ...) -> None: ...
    @staticmethod
    def MakePropertySet(usedRole: IObjectWithRoleReference, alias: str = ...) -> None: ...
    @staticmethod
    def MakeResource(usedRole: IObjectWithRoleReference, alias: str = ...) -> None: ...
    @staticmethod
    def MakeResourceStructure(usedRole: IObjectWithRoleReference, alias: str = ...) -> None: ...
    @staticmethod
    def MakeStructure(usedRole: IObjectWithRoleReference, alias: str = ...) -> None: ...


class AutomationMLBaseRoleClassLibType(AMLLibraryType_1[RoleFamilyType], IRoleClassContainer):
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def AutomationMLBaseRole(self) -> RoleFamilyType: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def Facet(self) -> RoleFamilyType: ...
    @property
    def Frame(self) -> RoleFamilyType: ...
    @property
    def Group(self) -> RoleFamilyType: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def InterlockingSourceGroup(self) -> RoleFamilyType: ...
    @property
    def InterlockingTargetGroup(self) -> RoleFamilyType: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Item(self) -> RoleFamilyType: ...
    @property
    def Item(self) -> RoleFamilyType: ...
    @property
    def LogicObject(self) -> RoleFamilyType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Port(self) -> RoleFamilyType: ...
    @property
    def Process(self) -> RoleFamilyType: ...
    @property
    def ProcessStructure(self) -> RoleFamilyType: ...
    @property
    def Product(self) -> RoleFamilyType: ...
    @property
    def ProductStructure(self) -> RoleFamilyType: ...
    @property
    def PropertySet(self) -> RoleFamilyType: ...
    @property
    def Resource(self) -> RoleFamilyType: ...
    @property
    def ResourceStructure(self) -> RoleFamilyType: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleClass(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[RoleFamilyType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def Structure(self) -> RoleFamilyType: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    @staticmethod
    def IsLoaded(document: CAEXDocument) -> bool: ...
    @staticmethod
    def RoleClassLib(document: CAEXDocument) -> AutomationMLBaseRoleClassLibType: ...


class AutomationMLContainer(IAMLFile):
    @typing.overload
    def __init__(self, containerFilePath: str) -> None: ...
    @typing.overload
    def __init__(self, containerFilePath: str, packageMode: FileMode) -> None: ...
    @typing.overload
    def __init__(self, containerFilePath: str, packageMode: FileMode, packageAccess: FileAccess) -> None: ...
    @typing.overload
    def __init__(self, containerFilePath: str, packageMode: FileMode, packageAccess: FileAccess, packageShare: FileShare) -> None: ...
    @typing.overload
    def __init__(self, packageStream: Stream) -> None: ...
    @typing.overload
    def __init__(self, packageStream: Stream, packageMode: FileMode) -> None: ...
    @typing.overload
    def __init__(self, packageStream: Stream, packageMode: FileMode, packageAccess: FileAccess) -> None: ...
    AutomationMLMimeType : str
    @property
    def CompressionMode(self) -> CompressionOption: ...
    @CompressionMode.setter
    def CompressionMode(self, value: CompressionOption) -> CompressionOption: ...
    @property
    def ContainerFilename(self) -> str: ...
    @property
    def ExtractionDirectory(self) -> str: ...
    @ExtractionDirectory.setter
    def ExtractionDirectory(self, value: str) -> str: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def Package(self) -> Package: ...
    @Package.setter
    def Package(self, value: Package) -> Package: ...
    def CheckRelatedParts(self, part: PackagePart, relationShipType: AutomationMLContainer.RelationshipType) -> IEnumerable_1[ValueTuple_3[Uri, Uri, bool]]: ...
    def Close(self) -> None: ...
    def Dispose(self) -> None: ...
    def ExtractAllFiles(self, path: str) -> None: ...
    def Flush(self) -> None: ...
    def GetPart(self, partUri: Uri) -> PackagePart: ...
    def GetParts(self) -> IEnumerable_1[PackagePart]: ...
    def GetPartsByRelationShipType(self, relationShipType: AutomationMLContainer.RelationshipType) -> IEnumerable_1[PackagePart]: ...
    def GetRelatedPartByUri(self, refUri: Uri, relationShipType: AutomationMLContainer.RelationshipType) -> PackagePart: ...
    def GetRelationShips(self) -> IEnumerable_1[PackageRelationship]: ...
    def GetRelationShipsByType(self, relationType: AutomationMLContainer.RelationshipType) -> IEnumerable_1[PackageRelationship]: ...
    def PartExists(self, partUri: Uri) -> bool: ...
    def RelationShipExists(self, relationShipType: AutomationMLContainer.RelationshipType) -> bool: ...
    def RootDocumentPath(self, dirInfo: DirectoryInfo) -> str: ...
    def RootDocumentStream(self) -> Stream: ...
    def Save(self) -> None: ...
    # Skipped AddAnyContent due to it being static, abstract and generic.

    AddAnyContent : AddAnyContent_MethodGroup
    class AddAnyContent_MethodGroup:
        @typing.overload
        def __call__(self, rootDocument: PackagePart, fileName: str, partUri: Uri, mimeType: str = ..., addPackageRelation: bool = ...) -> PackagePart:...
        @typing.overload
        def __call__(self, rootDocument: PackagePart, inStream: Stream, partUri: Uri, mimeType: str = ..., addPackageRelation: bool = ...) -> PackagePart:...

    # Skipped AddCAEXSchema due to it being static, abstract and generic.

    AddCAEXSchema : AddCAEXSchema_MethodGroup
    class AddCAEXSchema_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, partUri: Uri) -> PackagePart:...
        @typing.overload
        def __call__(self, inStream: Stream, partUri: Uri) -> PackagePart:...

    # Skipped AddCollada due to it being static, abstract and generic.

    AddCollada : AddCollada_MethodGroup
    class AddCollada_MethodGroup:
        @typing.overload
        def __call__(self, rootDocument: PackagePart, fileName: str, partUri: Uri, addPackageRelation: bool = ...) -> PackagePart:...
        @typing.overload
        def __call__(self, rootDocument: PackagePart, inStream: Stream, partUri: Uri, addPackageRelation: bool = ...) -> PackagePart:...

    # Skipped AddColladaSchema due to it being static, abstract and generic.

    AddColladaSchema : AddColladaSchema_MethodGroup
    class AddColladaSchema_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, partUri: Uri) -> PackagePart:...
        @typing.overload
        def __call__(self, inStream: Stream, partUri: Uri) -> PackagePart:...

    # Skipped AddLibrary due to it being static, abstract and generic.

    AddLibrary : AddLibrary_MethodGroup
    class AddLibrary_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, partUri: Uri) -> PackagePart:...
        @typing.overload
        def __call__(self, inStream: Stream, partUri: Uri) -> PackagePart:...
        @typing.overload
        def __call__(self, rootDocument: PackagePart, fileName: str, partUri: Uri, addPackageRelation: bool = ...) -> PackagePart:...
        @typing.overload
        def __call__(self, rootDocument: PackagePart, inStream: Stream, partUri: Uri, addPackageRelation: bool = ...) -> PackagePart:...

    # Skipped AddPLCopenXml due to it being static, abstract and generic.

    AddPLCopenXml : AddPLCopenXml_MethodGroup
    class AddPLCopenXml_MethodGroup:
        @typing.overload
        def __call__(self, rootDocument: PackagePart, fileName: str, partUri: Uri, addPackageRelation: bool = ...) -> PackagePart:...
        @typing.overload
        def __call__(self, rootDocument: PackagePart, inStream: Stream, partUri: Uri, addPackageRelation: bool = ...) -> PackagePart:...

    # Skipped AddPLCopenXmlSchema due to it being static, abstract and generic.

    AddPLCopenXmlSchema : AddPLCopenXmlSchema_MethodGroup
    class AddPLCopenXmlSchema_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, partUri: Uri) -> PackagePart:...
        @typing.overload
        def __call__(self, inStream: Stream, partUri: Uri) -> PackagePart:...

    # Skipped AddRoot due to it being static, abstract and generic.

    AddRoot : AddRoot_MethodGroup
    class AddRoot_MethodGroup:
        @typing.overload
        def __call__(self, fileName: str, partUri: Uri) -> PackagePart:...
        @typing.overload
        def __call__(self, inStream: Stream, partUri: Uri) -> PackagePart:...

    # Skipped Extract due to it being static, abstract and generic.

    Extract : Extract_MethodGroup
    class Extract_MethodGroup:
        @typing.overload
        def __call__(self, dirInfo: DirectoryInfo) -> None:...
        @typing.overload
        def __call__(self, dirInfo: DirectoryInfo, part: PackagePart) -> None:...

    # Skipped GetRelatedParts due to it being static, abstract and generic.

    GetRelatedParts : GetRelatedParts_MethodGroup
    class GetRelatedParts_MethodGroup:
        @typing.overload
        def __call__(self, part: PackagePart) -> IEnumerable_1[PackagePart]:...
        @typing.overload
        def __call__(self, part: PackagePart, relationShipType: AutomationMLContainer.RelationshipType) -> IEnumerable_1[PackagePart]:...

    # Skipped RelinkPart due to it being static, abstract and generic.

    RelinkPart : RelinkPart_MethodGroup
    class RelinkPart_MethodGroup:
        @typing.overload
        def __call__(self, oldPartUri: Uri, newPartUri: Uri) -> bool:...
        @typing.overload
        def __call__(self, part: PackagePart, relatedPart: PackagePart, newPartUri: Uri) -> bool:...


    class RelationshipType(IComparable_1[AutomationMLContainer.RelationshipType]):
        AnyContent : AutomationMLContainer.RelationshipType
        CAEXSchema : AutomationMLContainer.RelationshipType
        Collada : AutomationMLContainer.RelationshipType
        ColladaSchema : AutomationMLContainer.RelationshipType
        Library : AutomationMLContainer.RelationshipType
        PLCopenXml : AutomationMLContainer.RelationshipType
        PLCopenXmlSchema : AutomationMLContainer.RelationshipType
        Root : AutomationMLContainer.RelationshipType
        @property
        def MimeType(self) -> str: ...
        @property
        def Name(self) -> str: ...
        def CompareTo(self, other: AutomationMLContainer.RelationshipType) -> int: ...
        @staticmethod
        def GetAnyContent(mimeType: str = ...) -> AutomationMLContainer.RelationshipType: ...
        def ToString(self) -> str: ...



class AutomationMLInterfaceClassLib(abc.ABC):
    AttachmentInterface : str
    AutomationMLBaseInterface : str
    AutomationMLInterfaceClassLibName : str
    BehaviourLogicInterface : str
    COLLADAInterface : str
    Communication : str
    ExternalDataConnector : str
    ExternalDataReference : str
    InterlockingConnector : str
    InterlockingLogicInterface : str
    InterlockingVariableInterface : str
    LogicElementInterface : str
    LogicInterface : str
    Order : str
    PLCopenXMLInterface : str
    PortConnector : str
    PPRConnector : str
    SequencingBehaviourLogicInterface : str
    SequencingLogicInterface : str
    SignalInterface : str
    VariableInterface : str
    @staticmethod
    def AddAutomationMLInterfaceClassLib(caexDocument: CAEXDocument) -> AutomationMLInterfaceClassLibType: ...
    @staticmethod
    def IsAutomationMLBaseInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsBehaviourLogicInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsCOLLADAInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsCommunicationInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsExternalDataConnector(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsExternalDataReference(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsInterlockingConnector(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsInterlockingLogicInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsInterlockingVariableInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsLogicElementInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsLogicInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsOrderInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsPLCopenXMLInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsPortConnector(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsPPRConnector(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsSequencingBehaviourLogicInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsSequencingLogicInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsSignalInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsVariableInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def MakeAutomationMLBaseInterface(interfaceClass: InterfaceClassType, alias: str = ...) -> None: ...
    @staticmethod
    def MakeCOLLADAInterface(interfaceClass: InterfaceClassType, alias: str = ...) -> None: ...
    @staticmethod
    def MakeCommunicationInterface(interfaceClass: InterfaceClassType, alias: str = ...) -> None: ...
    @staticmethod
    def MakeExternalDataConnector(interfaceClass: InterfaceClassType, alias: str = ...) -> None: ...
    @staticmethod
    def MakeInterlockingConnector(interfaceClass: InterfaceClassType, alias: str = ...) -> None: ...
    @staticmethod
    def MakeOrderInterface(interfaceClass: InterfaceClassType, alias: str = ...) -> None: ...
    @staticmethod
    def MakePLCopenXMLInterface(interfaceClass: InterfaceClassType, alias: str = ...) -> None: ...
    @staticmethod
    def MakePortConnector(interfaceClass: InterfaceClassType, alias: str = ...) -> None: ...
    @staticmethod
    def MakePPRConnector(interfaceClass: InterfaceClassType, alias: str = ...) -> None: ...
    @staticmethod
    def MakeSignalInterface(interfaceClass: InterfaceClassType, alias: str = ...) -> None: ...


class AutomationMLInterfaceClassLibType(AMLLibraryType_1[InterfaceFamilyType], IInterfaceClassContainer):
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def InterfaceClass(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[InterfaceFamilyType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Item(self) -> InterfaceFamilyType: ...
    @property
    def Item(self) -> InterfaceFamilyType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    @staticmethod
    def InterfaceClassLib(document: CAEXDocument) -> AutomationMLInterfaceClassLibType: ...
    @staticmethod
    def IsLoaded(document: CAEXDocument) -> bool: ...


class AutomationMLLogicInterfaceClassLib(abc.ABC):
    AutomationMLLogicInterfaceClassLibName : str
    BehaviourLogicModelInterface : str
    InterlockingLogicModelInterface : str
    InterlockingVariableInterface : str
    LogicModelElementInterface : str
    LogicModelInterface : str
    SequencingLogicModelInterface : str
    VariableInterface : str
    @staticmethod
    def IsBehaviourLogicModelInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsInterlockingLogicModelInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsInterlockingVariableInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsLogicModelElementInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsLogicModelInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsSequencingLogicModelInterface(interfaceClass: InterfaceClassType) -> bool: ...
    @staticmethod
    def IsVariableInterface(interfaceClass: InterfaceClassType) -> bool: ...


class AutomationMLLogicInterfaceClassLibType(AMLLibraryType_1[InterfaceFamilyType], IInterfaceClassContainer):
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def InterfaceClass(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[InterfaceFamilyType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Item(self) -> InterfaceFamilyType: ...
    @property
    def Item(self) -> InterfaceFamilyType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    @staticmethod
    def InterfaceClassLib(document: CAEXDocument) -> AutomationMLLogicInterfaceClassLibType: ...
    @staticmethod
    def IsLoaded(document: CAEXDocument) -> bool: ...


class AutomationMLLogicRoleClassLib(abc.ABC):
    AutomationMLLogicRoleClassLibName : str
    InterlockingSourceGroup : str
    InterlockingTargetGroup : str
    LogicModelObject : str
    @staticmethod
    def IsInterlockingSourceGroup(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def IsInterlockingTargetGroup(role: IObjectWithRoleReference) -> bool: ...
    @staticmethod
    def IsLogicModelObject(role: IObjectWithRoleReference) -> bool: ...


class AutomationMLLogicRoleClassLibType(AMLLibraryType_1[RoleFamilyType], IRoleClassContainer):
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def InterlockingSourceGroup(self) -> RoleFamilyType: ...
    @property
    def InterlockingTargetGroup(self) -> RoleFamilyType: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Item(self) -> RoleFamilyType: ...
    @property
    def Item(self) -> RoleFamilyType: ...
    @property
    def LogicModelObject(self) -> RoleFamilyType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleClass(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[RoleFamilyType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    @staticmethod
    def RoleClassLib(document: CAEXDocument) -> AutomationMLLogicRoleClassLibType: ...


class AutomationMLPLCopenXMLInterfaceClassLib(abc.ABC):
    AutomationMLPLCopenXMLInterfaceClassLibName : str
    VariableInterface : str
    @staticmethod
    def IsVariableInterface(interfaceClass: InterfaceClassType) -> bool: ...


class AutomationMLPLCopenXMLInterfaceClassLibType(AMLLibraryType_1[InterfaceFamilyType], IInterfaceClassContainer):
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def InterfaceClass(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[InterfaceFamilyType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Item(self) -> InterfaceFamilyType: ...
    @property
    def Item(self) -> InterfaceFamilyType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    @staticmethod
    def InterfaceClassLib(document: CAEXDocument) -> AutomationMLPLCopenXMLInterfaceClassLibType: ...
    @staticmethod
    def IsLoaded(document: CAEXDocument) -> bool: ...


class CAEXSignatureHeader(abc.ABC):
    SignatureAttributeName : str
    SignatureAttributeValue : str
    @staticmethod
    def AppendSignatureHeader(caexObjectToSign: CAEXObject) -> XElement: ...
    @staticmethod
    def DeleteSignature(caexObject: CAEXObject) -> bool: ...
    @staticmethod
    def GetSignatureHeader(signedCAEXObject: CAEXObject) -> XElement: ...
    @staticmethod
    def GetXMLSignature(signedCAEXObject: CAEXObject) -> XMLSignature: ...


class ClassReferenceWithAlias(abc.ABC):
    @staticmethod
    def ClassReference(classReference: str, alias: str = ...) -> str: ...


class DocumentVersionInformation:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, element: XElement) -> None: ...
    @property
    def DocumentIdentifier(self) -> str: ...
    @DocumentIdentifier.setter
    def DocumentIdentifier(self, value: str) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...


class DocumentVersions(abc.ABC):
    DocumentElementName : str
    DocumentIdentifierAttributeName : str
    DocumentVersionsAttributeName : str
    DocumentVersionsAttributeValue : str
    VersionAttributeName : str
    @staticmethod
    def CreateDocumentVersionsHeader(caexFile: CAEXFileType) -> XElement: ...
    @staticmethod
    def DeleteDocumentVersionInformation(caexFile: CAEXFileType, documentIdentifier: str) -> bool: ...
    @staticmethod
    def DocumentVersionsHeader(caexFile: CAEXFileType) -> XElement: ...
    @staticmethod
    def GetAllDocumentVersionInformation(caexFile: CAEXFileType) -> IEnumerable_1[DocumentVersionInformation]: ...
    @staticmethod
    def GetDocumentVersionInformation(caexFile: CAEXFileType, documentIdentifier: str) -> DocumentVersionInformation: ...
    @staticmethod
    def ReplaceDocumentVersionInformation(caexFile: CAEXFileType, oldDocumentID: str, newDocumentVersionInformation: DocumentVersionInformation, error: clr.Reference[str]) -> bool: ...
    # Skipped AppendDocumentVersionInformation due to it being static, abstract and generic.

    AppendDocumentVersionInformation : AppendDocumentVersionInformation_MethodGroup
    class AppendDocumentVersionInformation_MethodGroup:
        @typing.overload
        def __call__(self, caexFile: CAEXFileType, versionInformation: DocumentVersionInformation, error: clr.Reference[str]) -> bool:...
        @typing.overload
        def __call__(self, caexFile: CAEXFileType, documentIdentifier: str, documentVersion: str, error: clr.Reference[str]) -> bool:...



class ExternalDataReference(abc.ABC):
    AutomationMLBPRInterfaceClassLibName : str
    AutomationMLBPRRoleClassLibName : str
    ExternalDataReferenceInterfaceClassName : str
    ExternalDataReferenceInterfaceClassPath : str
    ExternalDataRoleClassName : str
    ExternalDataRoleClassPath : str
    LanguageAttributeName : str
    @staticmethod
    def AddAutomationMLBPRInterfaceClassLib(caexFile: CAEXFileType) -> None: ...
    @staticmethod
    def AddAutomationMLBPRRoleClassLib(caexFile: CAEXFileType) -> None: ...
    @staticmethod
    def AddDocumentElement(internalElement: SystemUnitClassType, name: str, externalDataRoleClassPath: str = ...) -> InternalElementType: ...
    @staticmethod
    def AddDocumentElementRole(internalElement: InternalElementType, externalDataRoleClassPath: str) -> bool: ...
    @staticmethod
    def AddDocumentReference(documentElement: InternalElementType, referenceName: str, externalDataReferenceInterfaceClassPath: str = ...) -> InterfaceClassType: ...
    @staticmethod
    def AddExternalDataReferenceLibraries(caexFile: CAEXFileType) -> None: ...
    @staticmethod
    def AddLanguage(internalElement: InternalElementType, language: str) -> None: ...
    @staticmethod
    def AutomationMLBPRInterfaceClassLib(caexFile: CAEXFileType) -> InterfaceClassLibType: ...
    @staticmethod
    def AutomationMLBPRRoleClassLib(caexFile: CAEXFileType) -> RoleClassLibType: ...
    @staticmethod
    def DocumentElements(internalElement: SystemUnitClassType) -> IEnumerable_1[InternalElementType]: ...
    @staticmethod
    def GetLanguages(documentElement: InternalElementType) -> IEnumerable_1[str]: ...
    @staticmethod
    def IsDocumentElement(documentElement: InternalElementType) -> bool: ...
    # Skipped ExternalDataReferenceInterfaceClass due to it being static, abstract and generic.

    ExternalDataReferenceInterfaceClass : ExternalDataReferenceInterfaceClass_MethodGroup
    class ExternalDataReferenceInterfaceClass_MethodGroup:
        @typing.overload
        def __call__(self, automationMLBPRInterfaceClassLib: InterfaceClassLibType) -> InterfaceFamilyType:...
        @typing.overload
        def __call__(self, caexFile: CAEXFileType) -> InterfaceFamilyType:...

    # Skipped ExternalDataRoleClass due to it being static, abstract and generic.

    ExternalDataRoleClass : ExternalDataRoleClass_MethodGroup
    class ExternalDataRoleClass_MethodGroup:
        @typing.overload
        def __call__(self, automationMLBPRRoleClassLib: RoleClassLibType) -> RoleFamilyType:...
        @typing.overload
        def __call__(self, caexFile: CAEXFileType) -> RoleFamilyType:...



class FacetAttributeSequence(AttributeSequence):
    def __init__(self, owner: XElement, create: Func_2[XElement, AttributeType]) -> None: ...
    @property
    def CAEXOwner(self) -> CAEXWrapper: ...
    @property
    def Count(self) -> int: ...
    @property
    def ElementName(self) -> XName: ...
    @ElementName.setter
    def ElementName(self, value: XName) -> XName: ...
    @property
    def Elements(self) -> IEnumerable_1[XElement]: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def First(self) -> AttributeType: ...
    @property
    def IsOwnerDefined(self) -> bool: ...
    @property
    def Item(self) -> AttributeType: ...
    @property
    def Item(self) -> AttributeType: ...
    @property
    def Item(self) -> AttributeType: ...
    @Item.setter
    def Item(self, value: AttributeType) -> AttributeType: ...
    @property
    def Item(self) -> AttributeType: ...
    @property
    def Last(self) -> AttributeType: ...
    @property
    def Owner(self) -> XElement: ...
    def Insert(self, attribute: AttributeType, asFirst: bool = ...) -> AttributeType: ...
    def Prepend(self) -> AttributeType: ...
    # Skipped Append due to it being static, abstract and generic.

    Append : Append_MethodGroup
    class Append_MethodGroup:
        @typing.overload
        def __call__(self) -> AttributeType:...
        @typing.overload
        def __call__(self, name: str) -> AttributeType:...



class FacetExternalInterfaceSequence(ExternalInterfaceSequence):
    def __init__(self, owner: XElement, create: Func_2[XElement, ExternalInterfaceType]) -> None: ...
    @property
    def CAEXOwner(self) -> CAEXWrapper: ...
    @property
    def Count(self) -> int: ...
    @property
    def ElementName(self) -> XName: ...
    @ElementName.setter
    def ElementName(self, value: XName) -> XName: ...
    @property
    def Elements(self) -> IEnumerable_1[XElement]: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def First(self) -> ExternalInterfaceType: ...
    @property
    def IsOwnerDefined(self) -> bool: ...
    @property
    def Item(self) -> ExternalInterfaceType: ...
    @property
    def Item(self) -> ExternalInterfaceType: ...
    @property
    def Item(self) -> ExternalInterfaceType: ...
    @Item.setter
    def Item(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
    @property
    def Item(self) -> ExternalInterfaceType: ...
    @property
    def Last(self) -> ExternalInterfaceType: ...
    @property
    def Owner(self) -> XElement: ...
    def Insert(self, extInterface: ExternalInterfaceType, asFirst: bool = ...) -> ExternalInterfaceType: ...
    def Prepend(self) -> ExternalInterfaceType: ...
    # Skipped Append due to it being static, abstract and generic.

    Append : Append_MethodGroup
    class Append_MethodGroup:
        @typing.overload
        def __call__(self) -> ExternalInterfaceType:...
        @typing.overload
        def __call__(self, name: str) -> ExternalInterfaceType:...



class FrameAttributeType(AttributeType):
    @typing.overload
    def __init__(self, attributeNode: XElement) -> None: ...
    @typing.overload
    def __init__(self, init: XElement, frameValues: FrameValues) -> None: ...
    FormatInfo : NumberFormatInfo
    FRAME_NAME : str
    RX_Name : str
    RY_Name : str
    RZ_Name : str
    X_Name : str
    Y_Name : str
    Z_Name : str
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def AttributeDataType(self) -> str: ...
    @AttributeDataType.setter
    def AttributeDataType(self, value: str) -> str: ...
    @property
    def AttributePath(self) -> str: ...
    @property
    def AttributeTreeOwner(self) -> IObjectWithAttributes: ...
    @property
    def AttributeTypeDefiningAttribute(self) -> AttributeTypeType: ...
    @property
    def AttributeTypeReference(self) -> AttributeFamilyType: ...
    @AttributeTypeReference.setter
    def AttributeTypeReference(self, value: AttributeFamilyType) -> AttributeFamilyType: ...
    @property
    def AttributeValue(self) -> typing.Any: ...
    @AttributeValue.setter
    def AttributeValue(self, value: typing.Any) -> typing.Any: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Constraint(self) -> CAEXSequence_1[AttributeValueRequirementType]: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def DefaultAttributeValue(self) -> typing.Any: ...
    @DefaultAttributeValue.setter
    def DefaultAttributeValue(self, value: typing.Any) -> typing.Any: ...
    @property
    def DefaultValue(self) -> str: ...
    @DefaultValue.setter
    def DefaultValue(self, value: str) -> str: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def Frame(self) -> FrameValues: ...
    @Frame.setter
    def Frame(self, value: FrameValues) -> FrameValues: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsMaster(self) -> bool: ...
    @property
    def IsMirror(self) -> bool: ...
    @property
    def IsOverridden(self) -> bool: ...
    @property
    def Item(self) -> typing.Any: ...
    @Item.setter
    def Item(self, value: typing.Any) -> typing.Any: ...
    @property
    def Master(self) -> AttributeType: ...
    @Master.setter
    def Master(self, value: AttributeType) -> AttributeType: ...
    @property
    def MasterID(self) -> str: ...
    @property
    def MasterParentID(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefAttributeType(self) -> str: ...
    @RefAttributeType.setter
    def RefAttributeType(self, value: str) -> str: ...
    @property
    def Reference(self) -> AttributeTypeType: ...
    @Reference.setter
    def Reference(self, value: AttributeTypeType) -> AttributeTypeType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def RefSemantic(self) -> CAEXSequence_1[RefSemanticType]: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RxAttribute(self) -> AttributeType: ...
    @property
    def RyAttribute(self) -> AttributeType: ...
    @property
    def RzAttribute(self) -> AttributeType: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> str: ...
    @property
    def ValueAttributes(self) -> List_1[CaexValue]: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    @property
    def XAttribute(self) -> AttributeType: ...
    @property
    def YAttribute(self) -> AttributeType: ...
    @property
    def ZAttribute(self) -> AttributeType: ...
    @staticmethod
    def Create(doc: CAEXDocument, alias: str = ...) -> FrameAttributeType: ...
    @staticmethod
    def IsFrame(node: XElement) -> bool: ...
    @staticmethod
    def IsFrameAttribute(attribute: AttributeType) -> bool: ...
    @staticmethod
    def ValidateAndRepairFrameDatatypes(node: XElement) -> bool: ...


class FrameValues(INotifyPropertyChanged):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, x: float, y: float, z: float, rx: float, ry: float, rz: float) -> None: ...
    @property
    def Rx(self) -> float: ...
    @Rx.setter
    def Rx(self, value: float) -> float: ...
    @property
    def Ry(self) -> float: ...
    @Ry.setter
    def Ry(self, value: float) -> float: ...
    @property
    def Rz(self) -> float: ...
    @Rz.setter
    def Rz(self, value: float) -> float: ...
    @property
    def X(self) -> float: ...
    @X.setter
    def X(self, value: float) -> float: ...
    @property
    def Y(self) -> float: ...
    @Y.setter
    def Y(self, value: float) -> float: ...
    @property
    def Z(self) -> float: ...
    @Z.setter
    def Z(self, value: float) -> float: ...


class IAMLFile(IDisposable, typing.Protocol):
    @property
    def FilePath(self) -> str: ...


class ListAttribute(abc.ABC):
    ListTypeName : str
    OrderedListTypeName : str
    @staticmethod
    def AddListItem(attribute: AttributeType, itemType: str = ..., itemName: str = ...) -> AttributeType: ...
    @staticmethod
    def ConvertToListAttribute(attribute: AttributeType, itemName: str = ...) -> bool: ...
    @staticmethod
    def CreateListAttribute(element: IObjectWithAttributes, attributeName: str, itemsCount: int, itemType: str, itemName: str = ..., isOrderedList: bool = ..., alias: str = ...) -> AttributeType: ...
    @staticmethod
    def IsListAttribute(attribute: AttributeType) -> bool: ...
    @staticmethod
    def IsOrderedListAttribute(attribute: AttributeType) -> bool: ...
    @staticmethod
    def IsUnOrderedListAttribute(attribute: AttributeType) -> bool: ...
    @staticmethod
    def ListItems(attribute: AttributeType) -> IEnumerable_1[AttributeType]: ...
    @staticmethod
    def ListItemValues(attribute: AttributeType) -> IEnumerable_1[str]: ...
    @staticmethod
    def MakeListAttribute(attribute: AttributeType, isOrdered: bool = ...) -> bool: ...


class MetaInformation:
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, sourceDocumentInformation: SourceDocumentInformationType) -> None: ...
    @typing.overload
    def __init__(self, writerHeader: XElement) -> None: ...
    @property
    def LastWritingDateTime(self) -> str: ...
    @LastWritingDateTime.setter
    def LastWritingDateTime(self, value: str) -> str: ...
    @property
    def WriterID(self) -> str: ...
    @WriterID.setter
    def WriterID(self, value: str) -> str: ...
    @property
    def WriterName(self) -> str: ...
    @WriterName.setter
    def WriterName(self, value: str) -> str: ...
    @property
    def WriterProjectID(self) -> str: ...
    @WriterProjectID.setter
    def WriterProjectID(self, value: str) -> str: ...
    @property
    def WriterProjectTitle(self) -> str: ...
    @WriterProjectTitle.setter
    def WriterProjectTitle(self, value: str) -> str: ...
    @property
    def WriterRelease(self) -> str: ...
    @WriterRelease.setter
    def WriterRelease(self, value: str) -> str: ...
    @property
    def WriterVendor(self) -> str: ...
    @WriterVendor.setter
    def WriterVendor(self, value: str) -> str: ...
    @property
    def WriterVendorURL(self) -> str: ...
    @WriterVendorURL.setter
    def WriterVendorURL(self, value: str) -> str: ...
    @property
    def WriterVersion(self) -> str: ...
    @WriterVersion.setter
    def WriterVersion(self, value: str) -> str: ...


class ObjectWithAMLAttributes(CAEXObject, IObjectWithAttributes):
    def __init__(self, caexObject: IObjectWithAttributes) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def CAEXBase(self) -> IObjectWithAttributes: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def FrameAttribute(self) -> FrameAttributeType: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefTypeAttribute(self) -> RefTypeAttributeType: ...
    @property
    def RefURIAttribute(self) -> RefURIAttributeType: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def New_FrameAttribute(self, frameValues: FrameValues) -> FrameAttributeType: ...
    def New_RefUriAttribute(self, uri: str) -> RefURIAttributeType: ...


class RefTypeAttributeType(AttributeType):
    def __init__(self, init: XElement) -> None: ...
    REF_TYPE_ATTRIBUTE : str
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def AttributeDataType(self) -> str: ...
    @AttributeDataType.setter
    def AttributeDataType(self, value: str) -> str: ...
    @property
    def AttributePath(self) -> str: ...
    @property
    def AttributeTreeOwner(self) -> IObjectWithAttributes: ...
    @property
    def AttributeTypeDefiningAttribute(self) -> AttributeTypeType: ...
    @property
    def AttributeTypeReference(self) -> AttributeFamilyType: ...
    @AttributeTypeReference.setter
    def AttributeTypeReference(self, value: AttributeFamilyType) -> AttributeFamilyType: ...
    @property
    def AttributeValue(self) -> typing.Any: ...
    @AttributeValue.setter
    def AttributeValue(self, value: typing.Any) -> typing.Any: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Constraint(self) -> CAEXSequence_1[AttributeValueRequirementType]: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def DefaultAttributeValue(self) -> typing.Any: ...
    @DefaultAttributeValue.setter
    def DefaultAttributeValue(self, value: typing.Any) -> typing.Any: ...
    @property
    def DefaultValue(self) -> str: ...
    @DefaultValue.setter
    def DefaultValue(self, value: str) -> str: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsMaster(self) -> bool: ...
    @property
    def IsMirror(self) -> bool: ...
    @property
    def IsOverridden(self) -> bool: ...
    @property
    def IsRefTypeAttribute(self) -> bool: ...
    @property
    def Item(self) -> typing.Any: ...
    @Item.setter
    def Item(self, value: typing.Any) -> typing.Any: ...
    @property
    def Master(self) -> AttributeType: ...
    @Master.setter
    def Master(self, value: AttributeType) -> AttributeType: ...
    @property
    def MasterID(self) -> str: ...
    @property
    def MasterParentID(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefAttributeType(self) -> str: ...
    @RefAttributeType.setter
    def RefAttributeType(self, value: str) -> str: ...
    @property
    def Reference(self) -> AttributeTypeType: ...
    @Reference.setter
    def Reference(self, value: AttributeTypeType) -> AttributeTypeType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def RefSemantic(self) -> CAEXSequence_1[RefSemanticType]: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> str: ...
    @property
    def ValueAttributes(self) -> List_1[CaexValue]: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    @staticmethod
    def Create(doc: CAEXDocument) -> RefTypeAttributeType: ...
    def IsExplicit(self) -> bool: ...
    def IsImplicit(self) -> bool: ...


class RefURIAttributeType(AttributeType):
    def __init__(self, attributeNode: XElement) -> None: ...
    REF_URI_ATTRIBUTE : str
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def AttributeDataType(self) -> str: ...
    @AttributeDataType.setter
    def AttributeDataType(self, value: str) -> str: ...
    @property
    def AttributePath(self) -> str: ...
    @property
    def AttributeTreeOwner(self) -> IObjectWithAttributes: ...
    @property
    def AttributeTypeDefiningAttribute(self) -> AttributeTypeType: ...
    @property
    def AttributeTypeReference(self) -> AttributeFamilyType: ...
    @AttributeTypeReference.setter
    def AttributeTypeReference(self, value: AttributeFamilyType) -> AttributeFamilyType: ...
    @property
    def AttributeValue(self) -> typing.Any: ...
    @AttributeValue.setter
    def AttributeValue(self, value: typing.Any) -> typing.Any: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Constraint(self) -> CAEXSequence_1[AttributeValueRequirementType]: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def DefaultAttributeValue(self) -> typing.Any: ...
    @DefaultAttributeValue.setter
    def DefaultAttributeValue(self, value: typing.Any) -> typing.Any: ...
    @property
    def DefaultValue(self) -> str: ...
    @DefaultValue.setter
    def DefaultValue(self, value: str) -> str: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def FilePath(self) -> str: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsMaster(self) -> bool: ...
    @property
    def IsMirror(self) -> bool: ...
    @property
    def IsOverridden(self) -> bool: ...
    @property
    def IsRefURIAttribute(self) -> bool: ...
    @property
    def Item(self) -> typing.Any: ...
    @Item.setter
    def Item(self, value: typing.Any) -> typing.Any: ...
    @property
    def Master(self) -> AttributeType: ...
    @Master.setter
    def Master(self, value: AttributeType) -> AttributeType: ...
    @property
    def MasterID(self) -> str: ...
    @property
    def MasterParentID(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefAttributeType(self) -> str: ...
    @RefAttributeType.setter
    def RefAttributeType(self, value: str) -> str: ...
    @property
    def Reference(self) -> AttributeTypeType: ...
    @Reference.setter
    def Reference(self, value: AttributeTypeType) -> AttributeTypeType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def ReferencedNode(self) -> str: ...
    @property
    def RefSemantic(self) -> CAEXSequence_1[RefSemanticType]: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def TheUri(self) -> Uri: ...
    @TheUri.setter
    def TheUri(self, value: Uri) -> Uri: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> str: ...
    @property
    def ValueAttributes(self) -> List_1[CaexValue]: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    @staticmethod
    def Create(doc: CAEXDocument) -> RefURIAttributeType: ...
    def IsAbsoluteUri(self) -> bool: ...
    def IsFile(self) -> bool: ...
    def UriReferencesAreEqual(self, refUri: str) -> bool: ...


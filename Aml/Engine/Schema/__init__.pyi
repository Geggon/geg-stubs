import typing, clr, abc
from System.Xml.Linq import XNamespace, XName, XElement, XAttribute, XDocument
from System.Xml.Schema import XmlSchemaSet, XmlSchemaElement, XmlSchemaAttribute, XmlTypeCode, XmlSchemaAnnotated
from System.Collections.Generic import List_1, IEnumerable_1
from System import Decimal, Array_1

class AMLSchemaManager(XmlSchemaManager):
    ResourcePath : str
    @property
    def Namespace(self) -> XNamespace: ...
    @Namespace.setter
    def Namespace(self, value: XNamespace) -> XNamespace: ...
    @property
    def SchemaLocation(self) -> XName: ...
    @property
    def SchemaSet(self) -> XmlSchemaSet: ...
    def CreateElement(self, parentName: XName, childName: XName, allAttributes: bool = ...) -> XElement: ...
    @abc.abstractmethod
    def SetSchemaVersion(self, node: XElement) -> None: ...


class AMLSchemaManager2_15(AMLSchemaManager):
    @classmethod
    @property
    def Instance(cls) -> AMLSchemaManager2_15: ...
    @classmethod
    @Instance.setter
    def Instance(cls, value: AMLSchemaManager2_15) -> AMLSchemaManager2_15: ...
    @property
    def Namespace(self) -> XNamespace: ...
    @Namespace.setter
    def Namespace(self, value: XNamespace) -> XNamespace: ...
    @property
    def SchemaLocation(self) -> XName: ...
    @property
    def SchemaSet(self) -> XmlSchemaSet: ...
    def SetSchemaVersion(self, node: XElement) -> None: ...


class AMLSchemaManager3_0(AMLSchemaManager):
    @classmethod
    @property
    def CAEXNamespace(cls) -> XNamespace: ...
    @classmethod
    @property
    def Instance(cls) -> AMLSchemaManager3_0: ...
    @classmethod
    @Instance.setter
    def Instance(cls, value: AMLSchemaManager3_0) -> AMLSchemaManager3_0: ...
    @property
    def Namespace(self) -> XNamespace: ...
    @Namespace.setter
    def Namespace(self, value: XNamespace) -> XNamespace: ...
    @property
    def SchemaLocation(self) -> XName: ...
    @property
    def SchemaSet(self) -> XmlSchemaSet: ...
    def SetSchemaVersion(self, node: XElement) -> None: ...


class XmlSchemaElementInfo:
    def __init__(self, schemaElement: XmlSchemaElement) -> None: ...
    @property
    def AllAttributes(self) -> List_1[XmlSchemaAttribute]: ...
    @AllAttributes.setter
    def AllAttributes(self, value: List_1[XmlSchemaAttribute]) -> List_1[XmlSchemaAttribute]: ...
    @property
    def Choices(self) -> List_1[XName]: ...
    @Choices.setter
    def Choices(self, value: List_1[XName]) -> List_1[XName]: ...
    @property
    def MaxOccurrence(self) -> Decimal: ...
    @property
    def Optional(self) -> List_1[XName]: ...
    @Optional.setter
    def Optional(self, value: List_1[XName]) -> List_1[XName]: ...
    @property
    def Required(self) -> List_1[XName]: ...
    @Required.setter
    def Required(self, value: List_1[XName]) -> List_1[XName]: ...
    @property
    def RequiredAttributes(self) -> List_1[XmlSchemaAttribute]: ...
    @RequiredAttributes.setter
    def RequiredAttributes(self, value: List_1[XmlSchemaAttribute]) -> List_1[XmlSchemaAttribute]: ...
    @property
    def SchemaElement(self) -> XmlSchemaElement: ...
    @property
    def WithoutChoice(self) -> List_1[XName]: ...
    @WithoutChoice.setter
    def WithoutChoice(self, value: List_1[XName]) -> List_1[XName]: ...


class XmlSchemaManager(abc.ABC):
    @property
    def Namespace(self) -> XNamespace: ...
    @Namespace.setter
    def Namespace(self, value: XNamespace) -> XNamespace: ...
    @property
    def SchemaLocation(self) -> XName: ...
    @property
    def SchemaSet(self) -> XmlSchemaSet: ...
    @SchemaSet.setter
    def SchemaSet(self, value: XmlSchemaSet) -> XmlSchemaSet: ...
    @staticmethod
    def AcceptsAny(schemaElement: XmlSchemaElement) -> bool: ...
    def AddNew(self, parent: XElement, childName: XName, content: typing.Any) -> XElement: ...
    def AddNewAfterSelf(self, siblingBefore: XElement, childName: XName, content: typing.Any) -> XElement: ...
    def AttributeNames(self, parentName: XName, childName: XName, required: bool = ...) -> IEnumerable_1[str]: ...
    def Attributes(self, parentName: XName, childName: XName, required: bool = ...) -> IEnumerable_1[XmlSchemaAttribute]: ...
    def AttributeValueRestrictions(self, parentName: XName, childName: XName, attributeName: str) -> IEnumerable_1[typing.Any]: ...
    def CanAddNew(self, parent: XElement, childName: XName) -> bool: ...
    def ChildElementNames(self, parentName: XName, childName: XName, includeChoice: bool) -> IEnumerable_1[XName]: ...
    def ChildElements(self, parentName: XName, childName: XName, includeChoice: bool = ...) -> IEnumerable_1[XmlSchemaElement]: ...
    def Choices(self, parentName: XName, childName: XName) -> IEnumerable_1[XName]: ...
    def CreateAttribute(self, element: XElement, attributeName: str) -> XAttribute: ...
    def CreateElement(self, parentName: XName, childName: XName, allAttributes: bool = ...) -> XElement: ...
    def HasChoiceOfElements(self, parentName: XName, childName: XName, onlyOne: clr.Reference[bool]) -> bool: ...
    def HasSequenceOfSimpleElements(self, parentName: XName, childName: XName, onlyOne: clr.Reference[bool]) -> bool: ...
    def Insert(self, parent: XElement, child: XElement) -> bool: ...
    def InsertNew(self, parent: XElement, childName: XName, allAttributes: bool = ...) -> XElement: ...
    def IsChoice(self, parentName: str, childName: str) -> bool: ...
    @staticmethod
    def IsChoiceForOneElement(schemaElement: XmlSchemaElement) -> bool: ...
    def IsDefinedAttribute(self, parentName: XName, childName: XName, attributeName: str) -> bool: ...
    def IsParent(self, parent: XElement, childName: XName) -> bool: ...
    def IsRequiredAttribute(self, parentName: XName, childName: XName, attributeName: str) -> bool: ...
    def MaxOccurence(self, parentName: str, childName: str) -> Decimal: ...
    def MinOccurence(self, parentName: XName, childName: XName) -> Decimal: ...
    def SchemaElement(self, parentName: XName, childName: XName) -> XmlSchemaElement: ...
    def SiblingBefore(self, parent: XElement, childName: XName) -> XElement: ...
    def Validate(self, source: XDocument, messages: clr.Reference[Array_1[str]]) -> bool: ...
    def ValueType(self, parentName: XName, childName: XName) -> XmlTypeCode: ...
    # Skipped AttributeValueType due to it being static, abstract and generic.

    AttributeValueType : AttributeValueType_MethodGroup
    class AttributeValueType_MethodGroup:
        @typing.overload
        def __call__(self, schemaAttribute: XmlSchemaAttribute) -> XmlTypeCode:...
        @typing.overload
        def __call__(self, parentName: XName, childName: XName, attributeName: str) -> XmlTypeCode:...

    # Skipped GetAnnotation due to it being static, abstract and generic.

    GetAnnotation : GetAnnotation_MethodGroup
    class GetAnnotation_MethodGroup:
        @typing.overload
        def __call__(self, schemaElement: XmlSchemaElement) -> str:...
        @typing.overload
        def __call__(self, schemaAttribute: XmlSchemaAttribute) -> str:...
        @typing.overload
        def __call__(self, schemaElement: XmlSchemaAnnotated) -> str:...



class XmlTypeCodeExtensions(abc.ABC):
    @staticmethod
    def AttributeType(typeCode: XmlTypeCode) -> typing.Type[typing.Any]: ...
    @staticmethod
    def Default(typeCode: XmlTypeCode) -> typing.Any: ...
    @staticmethod
    def DefaultDecodedValue(typeCode: XmlTypeCode) -> typing.Any: ...
    @staticmethod
    def DefaultEncodedValue(typeCode: XmlTypeCode) -> str: ...
    @staticmethod
    def XmlTypeCodeFromSchemaType(schemaType: str) -> XmlTypeCode: ...


import typing, abc
from System import Version, Func_1
from Aml.Engine.Services.Interfaces import ICredentials
from System.Collections.Generic import List_1, Dictionary_2
from System.Net import NetworkCredential
from System.IO import Stream
from System.Xml import XmlElement, XmlDocument

class AccessRightsEnum(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    ReadAccess : AccessRightsEnum # 0
    WriteAccess : AccessRightsEnum # 1


class AMLEditionEnum(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Edition1 : AMLEditionEnum # 0
    Edition2 : AMLEditionEnum # 1
    AllEditions : AMLEditionEnum # 2


class AMLEditionEnumExtension(abc.ABC):
    @staticmethod
    def AMLEditionString(automationMLEdition: AMLEditionEnum) -> str: ...


class AMLFileContentType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    LibraryFile : AMLFileContentType # 0
    LibraryCollectionFile : AMLFileContentType # 1
    ExampleFile : AMLFileContentType # 2
    LibraryCatalog : AMLFileContentType # 3
    ClassRepository : AMLFileContentType # 4
    SignatureData : AMLFileContentType # 5


class AMLFileModel:
    def __init__(self, name: str, fileType: AMLFileContentType) -> None: ...
    AMLEdition1 : str
    AMLEdition2 : str
    @property
    def AliasNameFromParts(self) -> str: ...
    @property
    def ContentType(self) -> AMLFileContentType: ...
    @property
    def Domain(self) -> str: ...
    @Domain.setter
    def Domain(self, value: str) -> str: ...
    @property
    def Edition(self) -> str: ...
    @Edition.setter
    def Edition(self, value: str) -> str: ...
    @property
    def Extension(self) -> str: ...
    @Extension.setter
    def Extension(self, value: str) -> str: ...
    @property
    def FileNameFromParts(self) -> str: ...
    @property
    def FileType(self) -> AMLFileType: ...
    @FileType.setter
    def FileType(self, value: AMLFileType) -> AMLFileType: ...
    @property
    def IsConsistent(self) -> bool: ...
    @property
    def LibType(self) -> str: ...
    @LibType.setter
    def LibType(self, value: str) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Producer(self) -> str: ...
    @Producer.setter
    def Producer(self, value: str) -> str: ...
    @property
    def URL(self) -> str: ...
    @URL.setter
    def URL(self, value: str) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    def GetVersion(self) -> Version: ...
    def IsNewVersion(self, oldVersionModel: AMLFileModel) -> bool: ...


class AMLFileType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    AutomationMLXMLDocument : AMLFileType # 0
    AutomationMLContainer : AMLFileType # 1
    LibraryCatalog : AMLFileType # 2
    ZipArchive : AMLFileType # 3
    Unknown : AMLFileType # 4


class AMLLibraryServer(PasswordProtected, ICredentials):
    def __init__(self) -> None: ...
    ANONYMOUS : str
    @property
    def AccessRights(self) -> AccessRightsEnum: ...
    @AccessRights.setter
    def AccessRights(self, value: AccessRightsEnum) -> AccessRightsEnum: ...
    @property
    def AdministrationData(self) -> List_1[AMLLibraryServerData]: ...
    @AdministrationData.setter
    def AdministrationData(self, value: List_1[AMLLibraryServerData]) -> List_1[AMLLibraryServerData]: ...
    @property
    def BaseAddress(self) -> str: ...
    @BaseAddress.setter
    def BaseAddress(self, value: str) -> str: ...
    @property
    def ExampleData(self) -> List_1[AMLLibraryServerData]: ...
    @ExampleData.setter
    def ExampleData(self, value: List_1[AMLLibraryServerData]) -> List_1[AMLLibraryServerData]: ...
    @property
    def IsAnonymous(self) -> bool: ...
    @property
    def LibraryData(self) -> List_1[AMLLibraryServerData]: ...
    @LibraryData.setter
    def LibraryData(self, value: List_1[AMLLibraryServerData]) -> List_1[AMLLibraryServerData]: ...
    @property
    def LibrayCollectionData(self) -> List_1[AMLLibraryServerData]: ...
    @LibrayCollectionData.setter
    def LibrayCollectionData(self, value: List_1[AMLLibraryServerData]) -> List_1[AMLLibraryServerData]: ...
    @property
    def NetworkProtocol(self) -> NetworkProtocolEnum: ...
    @NetworkProtocol.setter
    def NetworkProtocol(self, value: NetworkProtocolEnum) -> NetworkProtocolEnum: ...
    @property
    def Password(self) -> str: ...
    @Password.setter
    def Password(self, value: str) -> str: ...
    @property
    def PortNumber(self) -> int: ...
    @PortNumber.setter
    def PortNumber(self, value: int) -> int: ...
    @property
    def ProtocolName(self) -> str: ...
    @property
    def ServerName(self) -> str: ...
    @ServerName.setter
    def ServerName(self, value: str) -> str: ...
    @property
    def ServerURL(self) -> str: ...
    @property
    def UserName(self) -> str: ...
    @UserName.setter
    def UserName(self, value: str) -> str: ...
    def Credentials(self, data: AMLLibraryServerData) -> NetworkCredential: ...
    @staticmethod
    def Deserialize(jsonString: str) -> AMLLibraryServer: ...
    def GetResolvedBaseAddress(self, data: AMLLibraryServerData) -> str: ...
    def Serialize(self) -> str: ...


class AMLLibraryServerData(PasswordProtected, ICredentials):
    def __init__(self) -> None: ...
    @property
    def AutomationMLEdition(self) -> AMLEditionEnum: ...
    @AutomationMLEdition.setter
    def AutomationMLEdition(self, value: AMLEditionEnum) -> AMLEditionEnum: ...
    @property
    def ContentType(self) -> AMLFileContentType: ...
    @ContentType.setter
    def ContentType(self, value: AMLFileContentType) -> AMLFileContentType: ...
    @property
    def Folder(self) -> str: ...
    @Folder.setter
    def Folder(self, value: str) -> str: ...
    @property
    def IsAnonymous(self) -> bool: ...
    @property
    def Password(self) -> str: ...
    @Password.setter
    def Password(self, value: str) -> str: ...
    @property
    def UserName(self) -> str: ...
    @UserName.setter
    def UserName(self, value: str) -> str: ...


class AMLResourceStream:
    def __init__(self, amlFileStream: Stream, amlFileType: AMLFileType, amlFileName: str) -> None: ...
    @property
    def AMLFileName(self) -> str: ...
    @property
    def AMLFileStream(self) -> Stream: ...
    @property
    def AMLFileType(self) -> AMLFileType: ...


class KeyInfo(XMLSignatureElement):
    def __init__(self) -> None: ...
    @property
    def KeyValue(self) -> KeyValue: ...
    @KeyValue.setter
    def KeyValue(self, value: KeyValue) -> KeyValue: ...
    def GetXml(self, document: XmlDocument) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...


class KeyValue(XMLSignatureElement):
    Constructors : Dictionary_2[str, Func_1[KeyValue]]
    @abc.abstractmethod
    def GetPublicKey(self) -> str: ...
    def GetXml(self, document: XmlDocument) -> XmlElement: ...


class NetworkProtocolEnum(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    WebDAV : NetworkProtocolEnum # 0
    FTP : NetworkProtocolEnum # 1


class PasswordProtected(abc.ABC):
    @property
    def Password(self) -> str: ...
    @Password.setter
    def Password(self, value: str) -> str: ...


class SignedInfo(XMLSignatureElement):
    def __init__(self) -> None: ...
    @property
    def SignatureMethod(self) -> str: ...
    @SignatureMethod.setter
    def SignatureMethod(self, value: str) -> str: ...
    def GetXml(self, document: XmlDocument) -> XmlElement: ...
    def LoadXml(self, value: XmlElement) -> None: ...


class XMLSignature(XMLSignatureElement):
    def __init__(self) -> None: ...
    XmlDsigNamespaceUrl : str
    @property
    def Id(self) -> str: ...
    @Id.setter
    def Id(self, value: str) -> str: ...
    @property
    def KeyInfo(self) -> KeyInfo: ...
    @KeyInfo.setter
    def KeyInfo(self, value: KeyInfo) -> KeyInfo: ...
    @property
    def SignatureValue(self) -> str: ...
    @SignatureValue.setter
    def SignatureValue(self, value: str) -> str: ...
    @property
    def SignedInfo(self) -> SignedInfo: ...
    @SignedInfo.setter
    def SignedInfo(self, value: SignedInfo) -> SignedInfo: ...
    @staticmethod
    def GetAttribute(element: XmlElement, localName: str, namespaceURI: str) -> str: ...
    def LoadFromDocument(self, document: XmlDocument) -> None: ...
    def LoadFromString(self, signatureElementString: str) -> None: ...
    def LoadXml(self, value: XmlElement) -> None: ...
    # Skipped DiscardWhiteSpaces due to it being static, abstract and generic.

    DiscardWhiteSpaces : DiscardWhiteSpaces_MethodGroup
    class DiscardWhiteSpaces_MethodGroup:
        @typing.overload
        def __call__(self, inputBuffer: str) -> str:...
        @typing.overload
        def __call__(self, inputBuffer: str, inputOffset: int, inputCount: int) -> str:...

    # Skipped GetXml due to it being static, abstract and generic.

    GetXml : GetXml_MethodGroup
    class GetXml_MethodGroup:
        @typing.overload
        def __call__(self) -> XmlElement:...
        @typing.overload
        def __call__(self, document: XmlDocument) -> XmlElement:...



class XMLSignatureElement(abc.ABC):
    @abc.abstractmethod
    def GetXml(self, document: XmlDocument) -> XmlElement: ...
    @abc.abstractmethod
    def LoadXml(self, element: XmlElement) -> None: ...


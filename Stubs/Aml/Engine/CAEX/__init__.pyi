import typing, clr, abc
from System.Xml.Linq import XElement, XDocument, XName, XNamespace, XNode
from System.Collections.Generic import IEnumerable_1, List_1, IEnumerator_1, Queue_1, Dictionary_2, IEqualityComparer_1
from Aml.Engine.CAEX.Extensions import CaexValue
from System import ValueTuple_2, Func_2, DateTime, Array_1, Predicate_1, Func_1
from System.Xml import XmlDateTimeSerializationMode
from Aml.Engine.XML import XDocumentWrapper, IXMLWrapper
from Aml.Engine.AmlObjects import IAMLFile
from Aml.Engine.Schema import AMLSchemaManager
from System.IO import Stream
from System.Threading.Tasks import Task_1
from Aml.Engine.Services.Interfaces import ISplitPoint
from System.ComponentModel import INotifyPropertyChanged

class AttributeFamilyType(AttributeTypeType, IClassWithBaseClassReference_1[AttributeFamilyType], IInstantiable_1[AttributeType], IAttributeTypeContainer, IObjectWithInheritedAttributes):
    def __init__(self, attributeTypeNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def AttributeAndInherited(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def AttributeDataType(self) -> str: ...
    @AttributeDataType.setter
    def AttributeDataType(self, value: str) -> str: ...
    @property
    def AttributeType(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[AttributeFamilyType]: ...
    @property
    def AttributeTypeDefiningAttribute(self) -> AttributeTypeType: ...
    @property
    def AttributeValue(self) -> typing.Any: ...
    @AttributeValue.setter
    def AttributeValue(self, value: typing.Any) -> typing.Any: ...
    @property
    def BaseClass(self) -> AttributeFamilyType: ...
    @BaseClass.setter
    def BaseClass(self, value: AttributeFamilyType) -> AttributeFamilyType: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Constraint(self) -> CAEXSequence_1[AttributeValueRequirementType]: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def DefaultAttributeValue(self) -> typing.Any: ...
    @DefaultAttributeValue.setter
    def DefaultAttributeValue(self, value: typing.Any) -> typing.Any: ...
    @property
    def DefaultValue(self) -> str: ...
    @DefaultValue.setter
    def DefaultValue(self, value: str) -> str: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def InheritedAttributes(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def InheritedConstraints(self) -> IEnumerable_1[AttributeValueRequirementType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsOverridden(self) -> bool: ...
    @property
    def Item(self) -> typing.Any: ...
    @Item.setter
    def Item(self, value: typing.Any) -> typing.Any: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefAttributeType(self) -> str: ...
    @RefAttributeType.setter
    def RefAttributeType(self, value: str) -> str: ...
    @property
    def RefBaseClassPath(self) -> str: ...
    @RefBaseClassPath.setter
    def RefBaseClassPath(self, value: str) -> str: ...
    @property
    def Reference(self) -> AttributeTypeType: ...
    @Reference.setter
    def Reference(self, value: AttributeTypeType) -> AttributeTypeType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def ReferencedClassName(self) -> str: ...
    @property
    def RefSemantic(self) -> CAEXSequence_1[RefSemanticType]: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> str: ...
    @property
    def ValueAttributes(self) -> List_1[CaexValue]: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    def CreateClassInstance(self) -> AttributeType: ...
    def GetEnumerator(self) -> IEnumerator_1[AttributeFamilyType]: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    def Remove(self, removeRelations: bool = ...) -> None: ...
    # Skipped Container due to it being static, abstract and generic.

    Container : Container_MethodGroup
    class Container_MethodGroup:
        def __getitem__(self, t:typing.Type[Container_1_T1]) -> Container_1[Container_1_T1]: ...

        Container_1_T1 = typing.TypeVar('Container_1_T1')
        class Container_1(typing.Generic[Container_1_T1]):
            Container_1_T = AttributeFamilyType.Container_MethodGroup.Container_1_T1
            def __call__(self) -> CAEXSequence_1[Container_1_T]:...


    # Skipped GetReferenceHierarchy due to it being static, abstract and generic.

    GetReferenceHierarchy : GetReferenceHierarchy_MethodGroup
    class GetReferenceHierarchy_MethodGroup:
        def __getitem__(self, t:typing.Type[GetReferenceHierarchy_1_T1]) -> GetReferenceHierarchy_1[GetReferenceHierarchy_1_T1]: ...

        GetReferenceHierarchy_1_T1 = typing.TypeVar('GetReferenceHierarchy_1_T1')
        class GetReferenceHierarchy_1(typing.Generic[GetReferenceHierarchy_1_T1]):
            GetReferenceHierarchy_1_T = AttributeFamilyType.GetReferenceHierarchy_MethodGroup.GetReferenceHierarchy_1_T1
            def __call__(self) -> Queue_1[GetReferenceHierarchy_1_T]:...

        def __call__(self) -> IEnumerable_1[AttributeFamilyType]:...

    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class AttributeNameMappingType(MappingElementType_1[AttributeType]):
    def __init__(self, attributeNameMappingNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def MappingObject(self) -> MappingType: ...
    @property
    def MappingRoleClass(self) -> RoleFamilyType: ...
    @property
    def MappingRoleReference(self) -> IObjectWithRoleReference: ...
    @property
    def MappingSystemUnitClass(self) -> SystemUnitClassType: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleAttribute(self) -> AttributeType: ...
    @RoleAttribute.setter
    def RoleAttribute(self, value: AttributeType) -> AttributeType: ...
    @property
    def RoleAttributeName(self) -> str: ...
    @RoleAttributeName.setter
    def RoleAttributeName(self, value: str) -> str: ...
    @property
    def RoleClassElement(self) -> AttributeType: ...
    @RoleClassElement.setter
    def RoleClassElement(self, value: AttributeType) -> AttributeType: ...
    @property
    def RoleClassElementIdentifier(self) -> str: ...
    @RoleClassElementIdentifier.setter
    def RoleClassElementIdentifier(self, value: str) -> str: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def SystemUnitAttribute(self) -> AttributeType: ...
    @SystemUnitAttribute.setter
    def SystemUnitAttribute(self, value: AttributeType) -> AttributeType: ...
    @property
    def SystemUnitAttributeName(self) -> str: ...
    @SystemUnitAttributeName.setter
    def SystemUnitAttributeName(self, value: str) -> str: ...
    @property
    def SystemUnitClassElement(self) -> AttributeType: ...
    @SystemUnitClassElement.setter
    def SystemUnitClassElement(self, value: AttributeType) -> AttributeType: ...
    @property
    def SystemUnitClassElementIdentifier(self) -> str: ...
    @SystemUnitClassElementIdentifier.setter
    def SystemUnitClassElementIdentifier(self, value: str) -> str: ...
    @property
    def SystemUnitClassMappingElements(self) -> IEnumerable_1[ValueTuple_2[AttributeType, str]]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def RoleClassMappingElements(self, includeDuplicates: bool = ...) -> IEnumerable_1[ValueTuple_2[AttributeType, str]]: ...


class AttributeSequence(CAEXSequenceOfCAEXObjectsWithReference_1[AttributeType]):
    def __init__(self, owner: XElement, create: Func_2[XElement, AttributeType]) -> None: ...
    @property
    def CAEXOwner(self) -> CAEXWrapper: ...
    @property
    def Count(self) -> int: ...
    @property
    def ElementName(self) -> XName: ...
    @ElementName.setter
    def ElementName(self, value: XName) -> XName: ...
    @property
    def Elements(self) -> IEnumerable_1[XElement]: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def First(self) -> AttributeType: ...
    @property
    def IsOwnerDefined(self) -> bool: ...
    @property
    def Item(self) -> AttributeType: ...
    @property
    def Item(self) -> AttributeType: ...
    @property
    def Item(self) -> AttributeType: ...
    @Item.setter
    def Item(self, value: AttributeType) -> AttributeType: ...
    @property
    def Item(self) -> AttributeType: ...
    @property
    def Last(self) -> AttributeType: ...
    @property
    def Owner(self) -> XElement: ...
    def GetCAEXAttribute(self, attributePath: str) -> AttributeType: ...


class AttributeType(AttributeTypeType, IMirror_1[AttributeType], IInstance):
    def __init__(self, attributeTypeNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def AttributeDataType(self) -> str: ...
    @AttributeDataType.setter
    def AttributeDataType(self, value: str) -> str: ...
    @property
    def AttributePath(self) -> str: ...
    @property
    def AttributeTreeOwner(self) -> IObjectWithAttributes: ...
    @property
    def AttributeTypeDefiningAttribute(self) -> AttributeTypeType: ...
    @property
    def AttributeTypeReference(self) -> AttributeFamilyType: ...
    @AttributeTypeReference.setter
    def AttributeTypeReference(self, value: AttributeFamilyType) -> AttributeFamilyType: ...
    @property
    def AttributeValue(self) -> typing.Any: ...
    @AttributeValue.setter
    def AttributeValue(self, value: typing.Any) -> typing.Any: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Constraint(self) -> CAEXSequence_1[AttributeValueRequirementType]: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def DefaultAttributeValue(self) -> typing.Any: ...
    @DefaultAttributeValue.setter
    def DefaultAttributeValue(self, value: typing.Any) -> typing.Any: ...
    @property
    def DefaultValue(self) -> str: ...
    @DefaultValue.setter
    def DefaultValue(self, value: str) -> str: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsMaster(self) -> bool: ...
    @property
    def IsMirror(self) -> bool: ...
    @property
    def IsOverridden(self) -> bool: ...
    @property
    def Item(self) -> typing.Any: ...
    @Item.setter
    def Item(self, value: typing.Any) -> typing.Any: ...
    @property
    def Master(self) -> AttributeType: ...
    @Master.setter
    def Master(self, value: AttributeType) -> AttributeType: ...
    @property
    def MasterID(self) -> str: ...
    @property
    def MasterParentID(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefAttributeType(self) -> str: ...
    @RefAttributeType.setter
    def RefAttributeType(self, value: str) -> str: ...
    @property
    def Reference(self) -> AttributeTypeType: ...
    @Reference.setter
    def Reference(self, value: AttributeTypeType) -> AttributeTypeType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def RefSemantic(self) -> CAEXSequence_1[RefSemanticType]: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> str: ...
    @property
    def ValueAttributes(self) -> List_1[CaexValue]: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CreateAttributeType(self) -> AttributeFamilyType: ...
    def CreateMirror(self) -> AttributeType: ...
    def RecreateAttributeInstance(self, attributeType: AttributeFamilyType) -> None: ...
    def UpdateInstance(self) -> bool: ...


class AttributeTypeLibType(CAEXLibrary_1[AttributeFamilyType], IAttributeTypeContainer):
    def __init__(self, attributeTypeLibNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def AttributeType(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[AttributeFamilyType]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Item(self) -> AttributeFamilyType: ...
    @property
    def Item(self) -> AttributeFamilyType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class AttributeTypeType(CaexObjectWithReference_1[AttributeTypeType], IObjectWithAttributes, IAttributeValueType):
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def AttributeDataType(self) -> str: ...
    @AttributeDataType.setter
    def AttributeDataType(self, value: str) -> str: ...
    @property
    def AttributeTypeDefiningAttribute(self) -> AttributeTypeType: ...
    @property
    def AttributeValue(self) -> typing.Any: ...
    @AttributeValue.setter
    def AttributeValue(self, value: typing.Any) -> typing.Any: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Constraint(self) -> CAEXSequence_1[AttributeValueRequirementType]: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def DefaultAttributeValue(self) -> typing.Any: ...
    @DefaultAttributeValue.setter
    def DefaultAttributeValue(self, value: typing.Any) -> typing.Any: ...
    @property
    def DefaultValue(self) -> str: ...
    @DefaultValue.setter
    def DefaultValue(self, value: str) -> str: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsOverridden(self) -> bool: ...
    @property
    def Item(self) -> typing.Any: ...
    @Item.setter
    def Item(self, value: typing.Any) -> typing.Any: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefAttributeType(self) -> str: ...
    @RefAttributeType.setter
    def RefAttributeType(self, value: str) -> str: ...
    @property
    def Reference(self) -> AttributeTypeType: ...
    @Reference.setter
    def Reference(self, value: AttributeTypeType) -> AttributeTypeType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def RefSemantic(self) -> CAEXSequence_1[RefSemanticType]: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Unit(self) -> str: ...
    @Unit.setter
    def Unit(self, value: str) -> str: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> str: ...
    @property
    def ValueAttributes(self) -> List_1[CaexValue]: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    @classmethod
    @property
    def XsdDataTypes(cls) -> List_1[str]: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    @staticmethod
    def ClrToXmlType(clrType: typing.Type[typing.Any]) -> str: ...
    def GetCaexValue(self, attributeName: str) -> CaexValue: ...
    def GetDateTime(self, dateTimeOption: XmlDateTimeSerializationMode) -> DateTime: ...
    def GetDouble(self) -> float: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    def InsertAfter(self, caexObject: AttributeTypeType) -> None: ...
    def InsertBefore(self, caexObject: AttributeTypeType) -> None: ...
    def IsInherited(self, owner: IObjectWithAttributes) -> bool: ...
    # Operator not supported op_Implicit(attributeType: AttributeTypeType)
    def SetDateTime(self, value: DateTime, mode: XmlDateTimeSerializationMode) -> None: ...
    def SetDouble(self, value: float) -> None: ...
    def TryGetDateTime(self, dateTimeOption: XmlDateTimeSerializationMode, dateTimeValue: clr.Reference[DateTime]) -> bool: ...
    def TryGetDouble(self, doubleValue: clr.Reference[float]) -> bool: ...
    @staticmethod
    def XmlTypeToClrType(xmlType: str) -> typing.Type[typing.Any]: ...
    # Skipped Container due to it being static, abstract and generic.

    Container : Container_MethodGroup
    class Container_MethodGroup:
        def __getitem__(self, t:typing.Type[Container_1_T1]) -> Container_1[Container_1_T1]: ...

        Container_1_T1 = typing.TypeVar('Container_1_T1')
        class Container_1(typing.Generic[Container_1_T1]):
            Container_1_T = AttributeTypeType.Container_MethodGroup.Container_1_T1
            def __call__(self) -> CAEXSequence_1[Container_1_T]:...


    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...

    # Skipped SetAttributeDataType due to it being static, abstract and generic.

    SetAttributeDataType : SetAttributeDataType_MethodGroup
    class SetAttributeDataType_MethodGroup:
        @typing.overload
        def __call__(self, clrType: typing.Type[typing.Any]) -> None:...
        @typing.overload
        def __call__(self, value: typing.Any) -> None:...



class AttributeValueRequirementType(CAEXBasicObject):
    def __init__(self, constraintNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def NominalScaledType(self) -> NominalScaledTypeType: ...
    @property
    def OrdinalScaledType(self) -> OrdinalScaledTypeType: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def UnknownType(self) -> UnknownTypeType: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    def New_NominalType(self) -> NominalScaledTypeType: ...
    def New_OrdinalType(self) -> OrdinalScaledTypeType: ...
    def New_UnknownType(self) -> UnknownTypeType: ...
    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class BaseElementType_GenericClasses(abc.ABCMeta):
    Generic_BaseElementType_GenericClasses_BaseElementType_1_TDataType = typing.TypeVar('Generic_BaseElementType_GenericClasses_BaseElementType_1_TDataType')
    def __getitem__(self, types : typing.Type[Generic_BaseElementType_GenericClasses_BaseElementType_1_TDataType]) -> typing.Type[BaseElementType_1[Generic_BaseElementType_GenericClasses_BaseElementType_1_TDataType]]: ...

BaseElementType : BaseElementType_GenericClasses

BaseElementType_1_TDataType = typing.TypeVar('BaseElementType_1_TDataType')
class BaseElementType_1(typing.Generic[BaseElementType_1_TDataType], CAEXWrapper_1[BaseElementType_1_TDataType]):
    def __init__(self, xNode: XElement) -> None: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Value(self) -> BaseElementType_1_TDataType: ...
    @Value.setter
    def Value(self, value: BaseElementType_1_TDataType) -> BaseElementType_1_TDataType: ...


class CAEX_CLASSModel_TagNames(abc.ABC):
    ADDITIONALINFORMATION_STRING : str
    ALIAS_ATTRIBUTE : str
    ATTRIBUTE_CONSTRAINT_NOMINAL_STRING : str
    ATTRIBUTE_CONSTRAINT_NOMINAL_VALUE_STRING : str
    ATTRIBUTE_CONSTRAINT_ORDINAL_MAX_STRING : str
    ATTRIBUTE_CONSTRAINT_ORDINAL_MIN_STRING : str
    ATTRIBUTE_CONSTRAINT_ORDINAL_STRING : str
    ATTRIBUTE_CONSTRAINT_ORDINAL_VALUE_STRING : str
    ATTRIBUTE_CONSTRAINT_STRING : str
    ATTRIBUTE_CONSTRAINT_UNKNOWN_REQ_STRING : str
    ATTRIBUTE_CONSTRAINT_UNKNOWN_STRING : str
    ATTRIBUTE_DATATYPE_STRING : str
    ATTRIBUTE_DEFAULTVALUE_STRING : str
    ATTRIBUTE_NAME_CORRESPONDING_ATTRIBUTE_PATH : str
    ATTRIBUTE_NAME_FILENAME : str
    ATTRIBUTE_NAME_REF_PARTNER_SIDE_A : str
    ATTRIBUTE_NAME_REF_PARTNER_SIDE_B : str
    ATTRIBUTE_NAME_REFATTRIBUTETYPE : str
    ATTRIBUTE_NAME_REFBASECLASSPATH : str
    ATTRIBUTE_NAME_REFBASEROLECLASSPATH : str
    ATTRIBUTE_NAME_REFBASESYSTEMUNITPATH : str
    ATTRIBUTE_NAME_REFROLECLASSPATH : str
    ATTRIBUTE_NAME_SCHEMA_LOCATION : str
    ATTRIBUTE_NAME_SCHEMA_VERSION : str
    ATTRIBUTE_REFSEMANTIC_STRING : str
    ATTRIBUTE_ROLE_ATTRIBUTE_NAME : str
    ATTRIBUTE_ROLE_INTERFACE_ID : str
    ATTRIBUTE_ROLE_INTERFACE_NAME : str
    ATTRIBUTE_STRING : str
    ATTRIBUTE_SYSTEM_UNIT_ATTRIBUTE_NAME : str
    ATTRIBUTE_SYSTEM_UNIT_INTERFACE_ID : str
    ATTRIBUTE_SYSTEM_UNIT_INTERFACE_NAME : str
    ATTRIBUTE_UNIT_STRING : str
    ATTRIBUTE_VALUE_REQUIREMENT_STRING : str
    ATTRIBUTE_VALUE_STRING : str
    ATTRIBUTEFAMILYTYPE_STRING : str
    ATTRIBUTETYPE_STRING : str
    ATTRIBUTETYPELIB_STRING : str
    CAEX_FILE : str
    CAEX_NAMESPACE : XNamespace
    CAEXBASICOBJECT : str
    CAEXOBJECT : str
    CHANGEMODE_ATTRIBUTE : str
    COPYRIGHT_STRING : str
    DESCRIPTION_STRING : str
    EXTERNALINTERFACE_STRING : str
    EXTERNALREFERENCE_STRING : str
    ID_ATTRIBUTE : str
    INSTANCEHIERARCHY_STRING : str
    INTERFACECLASS_STRING : str
    INTERFACECLASSLIB_STRING : str
    INTERFACEFAMILYTYPE_STRING : str
    INTERNALELEMENT_STRING : str
    INTERNALLINK_STRING : str
    LASTWRITINGDATETIME_ATTRIBUTE : str
    MAPPINGOBJECT_ATTRIBUTENAME_STRING : str
    MAPPINGOBJECT_INTERFACEID_STRING : str
    MAPPINGOBJECT_INTERFACENAME_STRING : str
    MAPPINGOBJECT_STRING : str
    MAPPINGTYPE_STRING : str
    META_ATTRIBUTE_NAME_AUTOMATIONMLVERSION : str
    META_ATTRIBUTE_NAME_DOCUMENTIDENTIFIER : str
    META_ATTRIBUTE_NAME_DOCUMENTVERSION : str
    META_WRITERHEADER_STRING : str
    META_WRITERID_STRING : str
    META_WRITERNAME_STRING : str
    META_WRITERPROJECTID_STRING : str
    META_WRITERPROJECTTITLE_STRING : str
    META_WRITERRELEASE_STRING : str
    META_WRITERVENDOR_STRING : str
    META_WRITERVENDORURL_STRING : str
    META_WRITERVERSION_STRING : str
    NAME_ATTRIBUTE : str
    ORIGINID_ATTRIBUTE : str
    ORIGINNAME_ATTRIBUTE : str
    ORIGINPROJECTID_ATTRIBUTE : str
    ORIGINPROJECTTITLE_ATTRIBUTE : str
    ORIGINRELEASE_ATTRIBUTE : str
    ORIGINVENDOR_ATTRIBUTE : str
    ORIGINVENDORURL_ATTRIBUTE : str
    ORIGINVERSION_ATTRIBUTE : str
    PATH_ATTRIBUTE : str
    REF_SEMANTIC_TYPE : str
    REVISION_AUTHOR_NAME : str
    REVISION_COMMENT : str
    REVISION_DATE_STRING : str
    REVISION_NEWVERSION_STRING : str
    REVISION_OLDVERSION_STRING : str
    REVISION_STRING : str
    ROLECLASS_STRING : str
    ROLECLASSLIB_STRING : str
    ROLEFAMILYTYPE_STRING : str
    ROLEREQUIREMENTS_STRING : str
    SOURCEDOCUMENTINFORMATION_STRING : str
    SOURCEOBJECTINFORMATION_STRING : str
    SOURCEOBJID_ATTRIBUTE : str
    SUPERIORSTANDARDVERSION_STRING : str
    SUPPORTEDROLECLASS_STRING : str
    SYSTEMUNITCLASS_STRING : str
    SYSTEMUNITCLASSLIB_STRING : str
    SYSTEMUNITFAMILYTYPE_STRING : str
    VERSION_STRING : str
    @staticmethod
    def TagName(caexWrapperType: typing.Type[typing.Any]) -> str: ...


class CAEXBasicObject(CAEXWrapper_0, ICAEXBasicObject, ICAEXContainer):
    def __init__(self, basicNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    def New_Revision(self, date: DateTime, author: str, asFirst: bool = ...) -> RevisionType: ...
    # Skipped Container due to it being static, abstract and generic.

    Container : Container_MethodGroup
    class Container_MethodGroup:
        def __getitem__(self, t:typing.Type[Container_1_T1]) -> Container_1[Container_1_T1]: ...

        Container_1_T1 = typing.TypeVar('Container_1_T1')
        class Container_1(typing.Generic[Container_1_T1]):
            Container_1_T = CAEXBasicObject.Container_MethodGroup.Container_1_T1
            def __call__(self) -> CAEXSequence_1[Container_1_T]:...


    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class CAEXDocument(XDocumentWrapper, IAMLFile):
    @property
    def AttributeTypeLib(self) -> CAEXSequenceOfCAEXObjects_1[AttributeTypeLibType]: ...
    @property
    def CAEXFile(self) -> CAEXFileType: ...
    @property
    def Commands(self) -> CAEXDocument.Commanding: ...
    @classmethod
    @property
    def DefaultSchema(cls) -> CAEXDocument.CAEXSchema: ...
    @property
    def FilePath(self) -> str: ...
    @FilePath.setter
    def FilePath(self, value: str) -> str: ...
    @property
    def InstanceHierarchy(self) -> CAEXSequenceOfCAEXObjects_1[InstanceHierarchyType]: ...
    @property
    def InterfaceClassLib(self) -> CAEXSequenceOfCAEXObjects_1[InterfaceClassLibType]: ...
    @property
    def RoleClassLib(self) -> CAEXSequenceOfCAEXObjects_1[RoleClassLibType]: ...
    @property
    def Schema(self) -> CAEXDocument.CAEXSchema: ...
    @Schema.setter
    def Schema(self, value: CAEXDocument.CAEXSchema) -> CAEXDocument.CAEXSchema: ...
    @property
    def SchemaManager(self) -> AMLSchemaManager: ...
    @property
    def SchemaVersionString(self) -> str: ...
    @property
    def SystemUnitClassLib(self) -> CAEXSequenceOfCAEXObjects_1[SystemUnitClassLibType]: ...
    @property
    def XDocument(self) -> XDocument: ...
    @staticmethod
    def LoadFromBinary(binary: Array_1[int], createIndices: bool = ...) -> CAEXDocument: ...
    @staticmethod
    def LoadFromFile(filePath: str, createIndices: bool = ...) -> CAEXDocument: ...
    @staticmethod
    def LoadFromStream(inStream: Stream, createIndices: bool = ...) -> CAEXDocument: ...
    @staticmethod
    def LoadFromString(utf8EncodedString: str, createIndices: bool = ...) -> CAEXDocument: ...
    @staticmethod
    def LoadFromStringAsync(utf8EncodedString: str, createIndices: bool = ...) -> Task_1[CAEXDocument]: ...
    def SaveToFile(self, filename: str, prettyPrint: bool = ...) -> None: ...
    def SaveToStream(self, prettyPrint: bool) -> Stream: ...
    def Validate(self, violationLog: clr.Reference[Array_1[str]]) -> bool: ...
    def XName(self, tagname: str) -> XName: ...
    # Skipped AMLSchemaManager due to it being static, abstract and generic.

    AMLSchemaManager : AMLSchemaManager_MethodGroup
    class AMLSchemaManager_MethodGroup:
        @typing.overload
        def __call__(self, node: XElement) -> AMLSchemaManager:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper) -> AMLSchemaManager:...

    # Skipped Document due to it being static, abstract and generic.

    Document : Document_MethodGroup
    class Document_MethodGroup:
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper) -> CAEXDocument:...
        @typing.overload
        def __call__(self, xNode: XNode) -> CAEXDocument:...

    # Skipped New_CAEXDocument due to it being static, abstract and generic.

    New_CAEXDocument : New_CAEXDocument_MethodGroup
    class New_CAEXDocument_MethodGroup:
        @typing.overload
        def __call__(self) -> CAEXDocument:...
        @typing.overload
        def __call__(self, schema: CAEXDocument.CAEXSchema) -> CAEXDocument:...


    class CAEXSchema(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Unknown : CAEXDocument.CAEXSchema # 0
        CAEX2_15 : CAEXDocument.CAEXSchema # 1
        CAEX3_0 : CAEXDocument.CAEXSchema # 2


    class Commanding:
        def __init__(self) -> None: ...



class CAEXEnumerable_GenericClasses(abc.ABCMeta):
    Generic_CAEXEnumerable_GenericClasses_CAEXEnumerable_1_T = typing.TypeVar('Generic_CAEXEnumerable_GenericClasses_CAEXEnumerable_1_T')
    def __getitem__(self, types : typing.Type[Generic_CAEXEnumerable_GenericClasses_CAEXEnumerable_1_T]) -> typing.Type[CAEXEnumerable_1[Generic_CAEXEnumerable_GenericClasses_CAEXEnumerable_1_T]]: ...

CAEXEnumerable : CAEXEnumerable_GenericClasses

CAEXEnumerable_1_T = typing.TypeVar('CAEXEnumerable_1_T')
class CAEXEnumerable_1(typing.Generic[CAEXEnumerable_1_T], IEnumerable_1[CAEXEnumerable_1_T]):
    @typing.overload
    def __init__(self, elements: IEnumerable_1[XElement]) -> None: ...
    @typing.overload
    def __init__(self, sequence: CAEXSequence_1[CAEXEnumerable_1_T], elements: IEnumerable_1[XElement]) -> None: ...
    def GetEnumerator(self) -> IEnumerator_1[CAEXEnumerable_1_T]: ...


class CAEXFileType(CAEXBasicObject, IEnumerable_1[CAEXObject]):
    def __init__(self, caexFileNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def AttributeTypeLib(self) -> CAEXSequenceOfCAEXObjects_1[AttributeTypeLibType]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalReference(self) -> CAEXSequence_1[ExternalReferenceType]: ...
    @property
    def FileName(self) -> str: ...
    @FileName.setter
    def FileName(self, value: str) -> str: ...
    @property
    def InstanceHierarchy(self) -> CAEXSequenceOfCAEXObjects_1[InstanceHierarchyType]: ...
    @property
    def InterfaceClassLib(self) -> CAEXSequenceOfCAEXObjects_1[InterfaceClassLibType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsEmpty(self) -> bool: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleClassLib(self) -> CAEXSequenceOfCAEXObjects_1[RoleClassLibType]: ...
    @property
    def SchemaLocation(self) -> str: ...
    @SchemaLocation.setter
    def SchemaLocation(self, value: str) -> str: ...
    @property
    def SchemaVersion(self) -> str: ...
    @SchemaVersion.setter
    def SchemaVersion(self, value: str) -> str: ...
    @property
    def SourceDocumentInformation(self) -> CAEXSequence_1[SourceDocumentInformationType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def SuperiorStandardVersion(self) -> ValueSequence_1[str]: ...
    @property
    def SystemUnitClassLib(self) -> CAEXSequenceOfCAEXObjects_1[SystemUnitClassLibType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    def GetEnumerator(self) -> IEnumerator_1[CAEXObject]: ...
    def GetFileNamePath(self) -> str: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class CAEXLibrary_GenericClasses(abc.ABCMeta):
    Generic_CAEXLibrary_GenericClasses_CAEXLibrary_1_TLibItem = typing.TypeVar('Generic_CAEXLibrary_GenericClasses_CAEXLibrary_1_TLibItem')
    def __getitem__(self, types : typing.Type[Generic_CAEXLibrary_GenericClasses_CAEXLibrary_1_TLibItem]) -> typing.Type[CAEXLibrary_1[Generic_CAEXLibrary_GenericClasses_CAEXLibrary_1_TLibItem]]: ...

CAEXLibrary : CAEXLibrary_GenericClasses

CAEXLibrary_1_TLibItem = typing.TypeVar('CAEXLibrary_1_TLibItem')
class CAEXLibrary_1(typing.Generic[CAEXLibrary_1_TLibItem], CAEXObject, IDigitalSigned, ICAEXLibrary, IMultipleOccurrences_1[CAEXLibrary_1[CAEXLibrary_1_TLibItem]], ISplitPoint, IEnumerable_1[CAEXLibrary_1_TLibItem]):
    def __init__(self, libraryNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Item(self) -> CAEXLibrary_1_TLibItem: ...
    @property
    def Item(self) -> CAEXLibrary_1_TLibItem: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CopyAndChangeReferences(self, caexFile: CAEXFileType, name: str) -> CAEXLibrary_1[CAEXLibrary_1_TLibItem]: ...
    def GetEnumerator(self) -> IEnumerator_1[CAEXLibrary_1_TLibItem]: ...
    def InsertAfter(self, caexObject: CAEXLibrary_1[CAEXLibrary_1_TLibItem]) -> None: ...
    def InsertBefore(self, caexObject: CAEXLibrary_1[CAEXLibrary_1_TLibItem]) -> None: ...
    # Skipped VerifySignature due to it being static, abstract and generic.

    VerifySignature : VerifySignature_MethodGroup[CAEXLibrary_1_TLibItem]
    VerifySignature_MethodGroup_CAEXLibrary_1_TLibItem = typing.TypeVar('VerifySignature_MethodGroup_CAEXLibrary_1_TLibItem')
    class VerifySignature_MethodGroup(typing.Generic[VerifySignature_MethodGroup_CAEXLibrary_1_TLibItem]):
        VerifySignature_MethodGroup_CAEXLibrary_1_TLibItem = CAEXLibrary_1.VerifySignature_MethodGroup_CAEXLibrary_1_TLibItem
        @typing.overload
        def __call__(self, publicKey: str = ...) -> typing.Optional[bool]:...
        @typing.overload
        def __call__(self, signature: str, publicKey: str) -> typing.Optional[bool]:...



class CAEXObject(CAEXBasicObject, ICAEXObject):
    def __init__(self, xmlNode: XElement) -> None: ...
    GUID_FORMAT : str
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @classmethod
    @property
    def NewGUID(cls) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def AssignNewGuidAsID(self, updateAllIdReferences: bool = ...) -> None: ...
    def CAEXPath(self) -> str: ...
    def Copy(self, deepCopy: bool = ..., assignNewIDs: bool = ..., includeSubClasses: bool = ...) -> CAEXWrapper: ...
    def ToString(self) -> str: ...


class CaexObjectWithReference_GenericClasses(abc.ABCMeta):
    Generic_CaexObjectWithReference_GenericClasses_CaexObjectWithReference_1_T = typing.TypeVar('Generic_CaexObjectWithReference_GenericClasses_CaexObjectWithReference_1_T')
    def __getitem__(self, types : typing.Type[Generic_CaexObjectWithReference_GenericClasses_CaexObjectWithReference_1_T]) -> typing.Type[CaexObjectWithReference_1[Generic_CaexObjectWithReference_GenericClasses_CaexObjectWithReference_1_T]]: ...

CaexObjectWithReference : CaexObjectWithReference_GenericClasses

CaexObjectWithReference_1_T = typing.TypeVar('CaexObjectWithReference_1_T')
class CaexObjectWithReference_1(typing.Generic[CaexObjectWithReference_1_T], CAEXObject, IMultipleOccurrences_1[CaexObjectWithReference_1_T], abc.ABC):
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Reference(self) -> CaexObjectWithReference_1_T: ...
    @Reference.setter
    def Reference(self, value: CaexObjectWithReference_1_T) -> CaexObjectWithReference_1_T: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def AddChild(self, name: str) -> CaexObjectWithReference_1_T: ...
    def AddReference(self, referencedClass: CAEXObject) -> bool: ...
    def CanAddReference(self, caexTarget: CAEXObject) -> bool: ...
    def InsertAfter(self, caexObject: CaexObjectWithReference_1_T) -> None: ...
    def InsertBefore(self, caexObject: CaexObjectWithReference_1_T) -> None: ...


class CAEXSequence_GenericClasses(abc.ABCMeta):
    Generic_CAEXSequence_GenericClasses_CAEXSequence_1_T = typing.TypeVar('Generic_CAEXSequence_GenericClasses_CAEXSequence_1_T')
    def __getitem__(self, types : typing.Type[Generic_CAEXSequence_GenericClasses_CAEXSequence_1_T]) -> typing.Type[CAEXSequence_1[Generic_CAEXSequence_GenericClasses_CAEXSequence_1_T]]: ...

CAEXSequence : CAEXSequence_GenericClasses

CAEXSequence_1_T = typing.TypeVar('CAEXSequence_1_T')
class CAEXSequence_1(typing.Generic[CAEXSequence_1_T], NamedElementSequence_1[CAEXSequence_1_T], ICAEXSequence):
    def __init__(self, owner: XElement, caexName: str, create: Func_2[XElement, CAEXSequence_1_T]) -> None: ...
    @property
    def CAEXOwner(self) -> CAEXWrapper: ...
    @property
    def Count(self) -> int: ...
    @property
    def ElementName(self) -> XName: ...
    @ElementName.setter
    def ElementName(self, value: XName) -> XName: ...
    @property
    def Elements(self) -> IEnumerable_1[XElement]: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def First(self) -> CAEXSequence_1_T: ...
    @property
    def IsOwnerDefined(self) -> bool: ...
    @property
    def Item(self) -> CAEXSequence_1_T: ...
    @Item.setter
    def Item(self, value: CAEXSequence_1_T) -> CAEXSequence_1_T: ...
    @property
    def Item(self) -> CAEXSequence_1_T: ...
    @property
    def Last(self) -> CAEXSequence_1_T: ...
    @property
    def Owner(self) -> XElement: ...
    def At(self, index: int) -> CAEXSequence_1_T: ...
    def GetEnumerator(self) -> IEnumerator_1[CAEXSequence_1_T]: ...
    def IndexOf(self, caexObject: CAEXSequence_1_T) -> int: ...
    def Insert(self, caexObject: CAEXSequence_1_T, asFirst: bool = ...) -> CAEXSequence_1_T: ...
    def InsertAt(self, index: int, caexObject: CAEXSequence_1_T) -> CAEXSequence_1_T: ...
    def Move(self, oldIndex: int, newIndex: int) -> None: ...
    def RemoveElement(self, caexObject: CAEXSequence_1_T) -> None: ...
    # Skipped Append due to it being static, abstract and generic.

    Append : Append_MethodGroup[CAEXSequence_1_T]
    Append_MethodGroup_CAEXSequence_1_T = typing.TypeVar('Append_MethodGroup_CAEXSequence_1_T')
    class Append_MethodGroup(typing.Generic[Append_MethodGroup_CAEXSequence_1_T]):
        Append_MethodGroup_CAEXSequence_1_T = CAEXSequence_1.Append_MethodGroup_CAEXSequence_1_T
        @typing.overload
        def __call__(self) -> Append_MethodGroup_CAEXSequence_1_T:...
        @typing.overload
        def __call__(self, attributeValueTuples: Array_1[ValueTuple_2[str, typing.Any]]) -> Append_MethodGroup_CAEXSequence_1_T:...

    # Skipped Prepend due to it being static, abstract and generic.

    Prepend : Prepend_MethodGroup[CAEXSequence_1_T]
    Prepend_MethodGroup_CAEXSequence_1_T = typing.TypeVar('Prepend_MethodGroup_CAEXSequence_1_T')
    class Prepend_MethodGroup(typing.Generic[Prepend_MethodGroup_CAEXSequence_1_T]):
        Prepend_MethodGroup_CAEXSequence_1_T = CAEXSequence_1.Prepend_MethodGroup_CAEXSequence_1_T
        @typing.overload
        def __call__(self) -> Prepend_MethodGroup_CAEXSequence_1_T:...
        @typing.overload
        def __call__(self, attributeValueTuples: Array_1[ValueTuple_2[str, typing.Any]]) -> Prepend_MethodGroup_CAEXSequence_1_T:...



class CAEXSequenceEnumerator_GenericClasses(abc.ABCMeta):
    Generic_CAEXSequenceEnumerator_GenericClasses_CAEXSequenceEnumerator_1_T = typing.TypeVar('Generic_CAEXSequenceEnumerator_GenericClasses_CAEXSequenceEnumerator_1_T')
    def __getitem__(self, types : typing.Type[Generic_CAEXSequenceEnumerator_GenericClasses_CAEXSequenceEnumerator_1_T]) -> typing.Type[CAEXSequenceEnumerator_1[Generic_CAEXSequenceEnumerator_GenericClasses_CAEXSequenceEnumerator_1_T]]: ...

CAEXSequenceEnumerator : CAEXSequenceEnumerator_GenericClasses

CAEXSequenceEnumerator_1_T = typing.TypeVar('CAEXSequenceEnumerator_1_T')
class CAEXSequenceEnumerator_1(typing.Generic[CAEXSequenceEnumerator_1_T], IEnumerator_1[CAEXSequenceEnumerator_1_T]):
    def __init__(self, sequence: CAEXSequence_1[CAEXSequenceEnumerator_1_T], elements: IEnumerable_1[XElement]) -> None: ...
    @property
    def Current(self) -> CAEXSequenceEnumerator_1_T: ...
    def Dispose(self) -> None: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...


class CAEXSequenceOfCAEXObjects_GenericClasses(abc.ABCMeta):
    Generic_CAEXSequenceOfCAEXObjects_GenericClasses_CAEXSequenceOfCAEXObjects_1_T = typing.TypeVar('Generic_CAEXSequenceOfCAEXObjects_GenericClasses_CAEXSequenceOfCAEXObjects_1_T')
    def __getitem__(self, types : typing.Type[Generic_CAEXSequenceOfCAEXObjects_GenericClasses_CAEXSequenceOfCAEXObjects_1_T]) -> typing.Type[CAEXSequenceOfCAEXObjects_1[Generic_CAEXSequenceOfCAEXObjects_GenericClasses_CAEXSequenceOfCAEXObjects_1_T]]: ...

CAEXSequenceOfCAEXObjects : CAEXSequenceOfCAEXObjects_GenericClasses

CAEXSequenceOfCAEXObjects_1_T = typing.TypeVar('CAEXSequenceOfCAEXObjects_1_T')
class CAEXSequenceOfCAEXObjects_1(typing.Generic[CAEXSequenceOfCAEXObjects_1_T], CAEXSequence_1[CAEXSequenceOfCAEXObjects_1_T]):
    @typing.overload
    def __init__(self, owner: XElement, caexName: str, create: Func_2[XElement, CAEXSequenceOfCAEXObjects_1_T]) -> None: ...
    @typing.overload
    def __init__(self, owner: XElement, caexName: str, create: Func_2[XElement, CAEXSequenceOfCAEXObjects_1_T], condition: Predicate_1[XElement]) -> None: ...
    @property
    def CAEXOwner(self) -> CAEXWrapper: ...
    @property
    def Count(self) -> int: ...
    @property
    def ElementName(self) -> XName: ...
    @ElementName.setter
    def ElementName(self, value: XName) -> XName: ...
    @property
    def Elements(self) -> IEnumerable_1[XElement]: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def First(self) -> CAEXSequenceOfCAEXObjects_1_T: ...
    @property
    def IsOwnerDefined(self) -> bool: ...
    @property
    def Item(self) -> CAEXSequenceOfCAEXObjects_1_T: ...
    @property
    def Item(self) -> CAEXSequenceOfCAEXObjects_1_T: ...
    @property
    def Item(self) -> CAEXSequenceOfCAEXObjects_1_T: ...
    @Item.setter
    def Item(self, value: CAEXSequenceOfCAEXObjects_1_T) -> CAEXSequenceOfCAEXObjects_1_T: ...
    @property
    def Item(self) -> CAEXSequenceOfCAEXObjects_1_T: ...
    @property
    def Last(self) -> CAEXSequenceOfCAEXObjects_1_T: ...
    @property
    def Owner(self) -> XElement: ...
    def Append(self, name: str) -> CAEXSequenceOfCAEXObjects_1_T: ...
    def Insert(self, sourceCAEXObject: CAEXSequenceOfCAEXObjects_1_T, asFirst: bool = ...) -> CAEXSequenceOfCAEXObjects_1_T: ...
    def Prepend(self, name: str) -> CAEXSequenceOfCAEXObjects_1_T: ...


class CAEXSequenceOfCAEXObjectsWithReference_GenericClasses(abc.ABCMeta):
    Generic_CAEXSequenceOfCAEXObjectsWithReference_GenericClasses_CAEXSequenceOfCAEXObjectsWithReference_1_T = typing.TypeVar('Generic_CAEXSequenceOfCAEXObjectsWithReference_GenericClasses_CAEXSequenceOfCAEXObjectsWithReference_1_T')
    def __getitem__(self, types : typing.Type[Generic_CAEXSequenceOfCAEXObjectsWithReference_GenericClasses_CAEXSequenceOfCAEXObjectsWithReference_1_T]) -> typing.Type[CAEXSequenceOfCAEXObjectsWithReference_1[Generic_CAEXSequenceOfCAEXObjectsWithReference_GenericClasses_CAEXSequenceOfCAEXObjectsWithReference_1_T]]: ...

CAEXSequenceOfCAEXObjectsWithReference : CAEXSequenceOfCAEXObjectsWithReference_GenericClasses

CAEXSequenceOfCAEXObjectsWithReference_1_T = typing.TypeVar('CAEXSequenceOfCAEXObjectsWithReference_1_T')
class CAEXSequenceOfCAEXObjectsWithReference_1(typing.Generic[CAEXSequenceOfCAEXObjectsWithReference_1_T], CAEXSequenceOfCAEXObjects_1[CAEXSequenceOfCAEXObjectsWithReference_1_T]):
    @typing.overload
    def __init__(self, owner: XElement, caexName: str, create: Func_2[XElement, CAEXSequenceOfCAEXObjectsWithReference_1_T]) -> None: ...
    @typing.overload
    def __init__(self, owner: XElement, caexName: str, create: Func_2[XElement, CAEXSequenceOfCAEXObjectsWithReference_1_T], condition: Predicate_1[XElement]) -> None: ...
    @property
    def CAEXOwner(self) -> CAEXWrapper: ...
    @property
    def Count(self) -> int: ...
    @property
    def ElementName(self) -> XName: ...
    @ElementName.setter
    def ElementName(self, value: XName) -> XName: ...
    @property
    def Elements(self) -> IEnumerable_1[XElement]: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def First(self) -> CAEXSequenceOfCAEXObjectsWithReference_1_T: ...
    @property
    def IsOwnerDefined(self) -> bool: ...
    @property
    def Item(self) -> CAEXSequenceOfCAEXObjectsWithReference_1_T: ...
    @property
    def Item(self) -> CAEXSequenceOfCAEXObjectsWithReference_1_T: ...
    @property
    def Item(self) -> CAEXSequenceOfCAEXObjectsWithReference_1_T: ...
    @Item.setter
    def Item(self, value: CAEXSequenceOfCAEXObjectsWithReference_1_T) -> CAEXSequenceOfCAEXObjectsWithReference_1_T: ...
    @property
    def Item(self) -> CAEXSequenceOfCAEXObjectsWithReference_1_T: ...
    @property
    def Last(self) -> CAEXSequenceOfCAEXObjectsWithReference_1_T: ...
    @property
    def Owner(self) -> XElement: ...
    def AppendWithReference(self, name: str, referencedClass: CAEXObject, isReferenced: clr.Reference[bool]) -> CAEXSequenceOfCAEXObjectsWithReference_1_T: ...


class CAEXTypeDictionary(Dictionary_2[str, typing.Type[typing.Any]]):
    Instance : CAEXTypeDictionary
    @property
    def Comparer(self) -> IEqualityComparer_1[str]: ...
    @property
    def Count(self) -> int: ...
    @property
    def Item(self) -> typing.Type[typing.Any]: ...
    @Item.setter
    def Item(self, value: typing.Type[typing.Any]) -> typing.Type[typing.Any]: ...
    @property
    def Item(self) -> typing.Type[typing.Any]: ...
    @Item.setter
    def Item(self, value: typing.Type[typing.Any]) -> typing.Type[typing.Any]: ...
    @property
    def Keys(self) -> Dictionary_2.KeyCollection_2[str, typing.Type[typing.Any]]: ...
    @property
    def Values(self) -> Dictionary_2.ValueCollection_2[str, typing.Type[typing.Any]]: ...
    def ContainsKey(self, caexTagName: str) -> bool: ...
    def TryGetCreator(self, elementName: str, creatorFunc: clr.Reference[Func_2[XElement, CAEXWrapper]]) -> bool: ...
    def TryGetValue(self, caexTagName: str, t: clr.Reference[typing.Type[typing.Any]]) -> bool: ...


class CAEXWrapper_GenericClasses(abc.ABCMeta):
    Generic_CAEXWrapper_GenericClasses_CAEXWrapper_1_TDataType = typing.TypeVar('Generic_CAEXWrapper_GenericClasses_CAEXWrapper_1_TDataType')
    def __getitem__(self, types : typing.Type[Generic_CAEXWrapper_GenericClasses_CAEXWrapper_1_TDataType]) -> typing.Type[CAEXWrapper_1[Generic_CAEXWrapper_GenericClasses_CAEXWrapper_1_TDataType]]: ...

class CAEXWrapper(CAEXWrapper_0, metaclass =CAEXWrapper_GenericClasses): ...

class CAEXWrapper_0(ICAEXWrapper, INotifyPropertyChanged):
    def __init__(self, xElement: XElement) -> None: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def TagName(self) -> str: ...
    def CAEXChild(self, tagName: str) -> CAEXWrapper: ...
    def CAEXChildren(self, tagName: str) -> IEnumerable_1[CAEXWrapper]: ...
    def Copy(self, deepCopy: bool = ..., assignNewIDs: bool = ..., includeSubClasses: bool = ...) -> CAEXWrapper: ...
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def GetXAttributeValue(self, attributeName: XName) -> str: ...
    def InsertNew(self) -> bool: ...
    def __eq__(self, obj1: CAEXWrapper, obj2: CAEXWrapper) -> bool: ...
    def __ne__(self, obj1: CAEXWrapper, obj2: CAEXWrapper) -> bool: ...
    def Remove(self, removeRelations: bool = ...) -> None: ...
    def SetXAttributeValue(self, attributeName: XName, attributeValue: typing.Any) -> None: ...


CAEXWrapper_1_TDataType = typing.TypeVar('CAEXWrapper_1_TDataType')
class CAEXWrapper_1(typing.Generic[CAEXWrapper_1_TDataType], CAEXWrapper_0):
    def __init__(self, xmlNode: XElement) -> None: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Value(self) -> CAEXWrapper_1_TDataType: ...
    @Value.setter
    def Value(self, value: CAEXWrapper_1_TDataType) -> CAEXWrapper_1_TDataType: ...


class ChangeMode(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    State : ChangeMode # 0
    Create : ChangeMode # 1
    Delete : ChangeMode # 2
    Change : ChangeMode # 3
    Undefined : ChangeMode # 4


class CopyrightType(BaseElementType_1[str]):
    def __init__(self, xmlNode: XElement) -> None: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> str: ...


class DescriptionType(BaseElementType_1[str]):
    def __init__(self, xmlNode: XElement) -> None: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> str: ...


class ExternalInterfaceSequence(CAEXSequenceOfCAEXObjectsWithReference_1[ExternalInterfaceType]):
    def __init__(self, owner: XElement, create: Func_2[XElement, ExternalInterfaceType]) -> None: ...
    @property
    def CAEXOwner(self) -> CAEXWrapper: ...
    @property
    def Count(self) -> int: ...
    @property
    def ElementName(self) -> XName: ...
    @ElementName.setter
    def ElementName(self, value: XName) -> XName: ...
    @property
    def Elements(self) -> IEnumerable_1[XElement]: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def First(self) -> ExternalInterfaceType: ...
    @property
    def IsOwnerDefined(self) -> bool: ...
    @property
    def Item(self) -> ExternalInterfaceType: ...
    @property
    def Item(self) -> ExternalInterfaceType: ...
    @property
    def Item(self) -> ExternalInterfaceType: ...
    @Item.setter
    def Item(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
    @property
    def Item(self) -> ExternalInterfaceType: ...
    @property
    def Last(self) -> ExternalInterfaceType: ...
    @property
    def Owner(self) -> XElement: ...
    def ExternalInterfaceDescandantsAndSelf(self) -> IEnumerable_1[ExternalInterfaceType]: ...


class ExternalInterfaceType(InterfaceClassType, IMirror_1[ExternalInterfaceType], IInstance):
    def __init__(self, externalInterfaceNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def AssociatedObject(self) -> IObjectWithExternalInterface: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def BaseClass(self) -> InterfaceFamilyType: ...
    @BaseClass.setter
    def BaseClass(self, value: InterfaceFamilyType) -> InterfaceFamilyType: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalInterface(self) -> ExternalInterfaceSequence: ...
    @property
    def ExternalInterfaceAndDescendants(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def InterfaceClass(self) -> InterfaceFamilyType: ...
    @InterfaceClass.setter
    def InterfaceClass(self, value: InterfaceFamilyType) -> InterfaceFamilyType: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsMirror(self) -> bool: ...
    @property
    def Master(self) -> ExternalInterfaceType: ...
    @Master.setter
    def Master(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
    @property
    def MasterID(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefBaseClassPath(self) -> str: ...
    @RefBaseClassPath.setter
    def RefBaseClassPath(self, value: str) -> str: ...
    @property
    def Reference(self) -> InterfaceClassType: ...
    @Reference.setter
    def Reference(self, value: InterfaceClassType) -> InterfaceClassType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CreateMirror(self) -> ExternalInterfaceType: ...
    def HasInterfaceClassReference(self, interfaceClass: InterfaceFamilyType, regardInheritance: bool = ...) -> bool: ...
    # Operator not supported op_Implicit(interfaceClass: ExternalInterfaceType)
    def Remove(self, removeRelations: bool = ...) -> None: ...
    def UpdateInstance(self) -> bool: ...


class ExternalReferenceType(CAEXBasicObject, IMultipleOccurrences_1[ExternalReferenceType]):
    def __init__(self, externalReferenceNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Alias(self) -> str: ...
    @Alias.setter
    def Alias(self, value: str) -> str: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalDocument(self) -> CAEXDocument: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Path(self) -> str: ...
    @Path.setter
    def Path(self, value: str) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def InsertAfter(self, caexObject: ExternalReferenceType) -> None: ...
    def InsertBefore(self, caexObject: ExternalReferenceType) -> None: ...


class IAttributeTypeContainer(ICAEXObject, IEnumerable_1[AttributeFamilyType], typing.Protocol):
    @property
    def AttributeType(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[AttributeFamilyType]: ...


class IAttributeValueType(ICAEXWrapper, typing.Protocol):
    @property
    def AttributeDataType(self) -> str: ...
    @property
    def AttributeTypeDefiningAttribute(self) -> AttributeTypeType: ...
    @property
    def Item(self) -> typing.Any: ...
    @Item.setter
    def Item(self, value: typing.Any) -> typing.Any: ...
    @property
    def ValueAttributes(self) -> List_1[CaexValue]: ...
    @abc.abstractmethod
    def GetCaexValue(self, attributeName: str) -> CaexValue: ...


class ICAEXBasicObject(ICAEXWrapper, typing.Protocol):
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    @abc.abstractmethod
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    @abc.abstractmethod
    def New_Revision(self, date: DateTime, author: str, asFirst: bool = ...) -> RevisionType: ...
    # Skipped Container due to it being static, abstract and generic.

    Container : Container_MethodGroup
    class Container_MethodGroup:
        def __getitem__(self, t:typing.Type[Container_1_T1]) -> Container_1[Container_1_T1]: ...

        Container_1_T1 = typing.TypeVar('Container_1_T1')
        class Container_1(typing.Generic[Container_1_T1]):
            Container_1_T = ICAEXBasicObject.Container_MethodGroup.Container_1_T1
            def __call__(self) -> CAEXSequence_1[Container_1_T]:...


    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class ICAEXContainer(ICAEXWrapper, typing.Protocol):
    @abc.abstractmethod
    def Insert(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool: ...


class ICAEXLibrary(ICAEXObject, typing.Protocol):
    pass


class ICAEXObject(ICAEXBasicObject, typing.Protocol):
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @abc.abstractmethod
    def CAEXPath(self) -> str: ...


class ICAEXSequence(typing.Protocol):
    @property
    def First(self) -> ICAEXWrapper: ...
    @property
    def Item(self) -> ICAEXWrapper: ...
    @property
    def Item(self) -> ICAEXWrapper: ...
    @Item.setter
    def Item(self, value: ICAEXWrapper) -> ICAEXWrapper: ...
    @property
    def Last(self) -> ICAEXWrapper: ...
    @abc.abstractmethod
    def At(self, index: int) -> ICAEXWrapper: ...
    @abc.abstractmethod
    def GetEnumerator(self) -> IEnumerator_1[ICAEXWrapper]: ...
    @abc.abstractmethod
    def IndexOf(self, caexObject: ICAEXWrapper) -> int: ...
    @abc.abstractmethod
    def Insert(self, caexObject: ICAEXWrapper, asFirst: bool = ...) -> None: ...
    @abc.abstractmethod
    def InsertAt(self, index: int, caexObject: ICAEXWrapper) -> None: ...
    @abc.abstractmethod
    def Move(self, oldIndex: int, newIndex: int) -> None: ...
    @abc.abstractmethod
    def RemoveElement(self, caexObject: ICAEXWrapper) -> None: ...
    # Skipped Append due to it being static, abstract and generic.

    Append : Append_MethodGroup
    class Append_MethodGroup:
        @typing.overload
        def __call__(self) -> ICAEXWrapper:...
        @typing.overload
        def __call__(self, attributeValueTuples: Array_1[ValueTuple_2[str, typing.Any]]) -> ICAEXWrapper:...

    # Skipped Prepend due to it being static, abstract and generic.

    Prepend : Prepend_MethodGroup
    class Prepend_MethodGroup:
        @typing.overload
        def __call__(self) -> ICAEXWrapper:...
        @typing.overload
        def __call__(self, attributeValueTuples: Array_1[ValueTuple_2[str, typing.Any]]) -> ICAEXWrapper:...



class ICAEXWrapper(IXMLWrapper, typing.Protocol):
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @abc.abstractmethod
    def CAEXChild(self, tagName: str) -> CAEXWrapper: ...
    @abc.abstractmethod
    def CAEXChildren(self, tagName: str) -> IEnumerable_1[CAEXWrapper]: ...
    @abc.abstractmethod
    def Remove(self, removeRelations: bool = ...) -> None: ...


class IClassWithBaseClassReference_GenericClasses(abc.ABCMeta):
    Generic_IClassWithBaseClassReference_GenericClasses_IClassWithBaseClassReference_1_T = typing.TypeVar('Generic_IClassWithBaseClassReference_GenericClasses_IClassWithBaseClassReference_1_T')
    def __getitem__(self, types : typing.Type[Generic_IClassWithBaseClassReference_GenericClasses_IClassWithBaseClassReference_1_T]) -> typing.Type[IClassWithBaseClassReference_1[Generic_IClassWithBaseClassReference_GenericClasses_IClassWithBaseClassReference_1_T]]: ...

class IClassWithBaseClassReference(IClassWithBaseClassReference_0, metaclass =IClassWithBaseClassReference_GenericClasses): ...

class IClassWithBaseClassReference_0(ICAEXObject, IObjectWithAttributes, typing.Protocol):
    @property
    def RefBaseClassPath(self) -> str: ...
    @RefBaseClassPath.setter
    def RefBaseClassPath(self, value: str) -> str: ...
    @property
    def ReferencedClassName(self) -> str: ...
    # Skipped GetReferenceHierarchy due to it being static, abstract and generic.

    GetReferenceHierarchy : GetReferenceHierarchy_MethodGroup
    class GetReferenceHierarchy_MethodGroup:
        def __getitem__(self, t:typing.Type[GetReferenceHierarchy_1_T1]) -> GetReferenceHierarchy_1[GetReferenceHierarchy_1_T1]: ...

        GetReferenceHierarchy_1_T1 = typing.TypeVar('GetReferenceHierarchy_1_T1')
        class GetReferenceHierarchy_1(typing.Generic[GetReferenceHierarchy_1_T1]):
            GetReferenceHierarchy_1_T = IClassWithBaseClassReference_0.GetReferenceHierarchy_MethodGroup.GetReferenceHierarchy_1_T1
            def __call__(self) -> Queue_1[GetReferenceHierarchy_1_T]:...




IClassWithBaseClassReference_1_T = typing.TypeVar('IClassWithBaseClassReference_1_T')
class IClassWithBaseClassReference_1(typing.Generic[IClassWithBaseClassReference_1_T], IClassWithBaseClassReference_0, typing.Protocol):
    @property
    def BaseClass(self) -> IClassWithBaseClassReference_1_T: ...
    @BaseClass.setter
    def BaseClass(self, value: IClassWithBaseClassReference_1_T) -> IClassWithBaseClassReference_1_T: ...
    @abc.abstractmethod
    def GetReferenceHierarchy(self) -> IEnumerable_1[IClassWithBaseClassReference_1_T]: ...


class IClassWithExternalInterface(IObjectWithExternalInterfaceAndInherited, IClassWithBaseClassReference_0, typing.Protocol):
    pass


class IDigitalSigned(ICAEXObject, typing.Protocol):
    # Skipped VerifySignature due to it being static, abstract and generic.

    VerifySignature : VerifySignature_MethodGroup
    class VerifySignature_MethodGroup:
        @typing.overload
        def __call__(self, publicKey: str = ...) -> typing.Optional[bool]:...
        @typing.overload
        def __call__(self, signature: str, publicKey: str) -> typing.Optional[bool]:...



class IInstance(typing.Protocol):
    @abc.abstractmethod
    def UpdateInstance(self) -> bool: ...


class IInstantiable_GenericClasses(abc.ABCMeta):
    Generic_IInstantiable_GenericClasses_IInstantiable_1_TINSTANCE = typing.TypeVar('Generic_IInstantiable_GenericClasses_IInstantiable_1_TINSTANCE')
    def __getitem__(self, types : typing.Type[Generic_IInstantiable_GenericClasses_IInstantiable_1_TINSTANCE]) -> typing.Type[IInstantiable_1[Generic_IInstantiable_GenericClasses_IInstantiable_1_TINSTANCE]]: ...

class IInstantiable(IInstantiable_0, metaclass =IInstantiable_GenericClasses): ...

class IInstantiable_0(ICAEXObject, typing.Protocol):
    @abc.abstractmethod
    def CreateClassInstance(self) -> CAEXWrapper: ...


IInstantiable_1_TINSTANCE = typing.TypeVar('IInstantiable_1_TINSTANCE', covariant=True)
class IInstantiable_1(typing.Generic[IInstantiable_1_TINSTANCE], IInstantiable_0, typing.Protocol):
    @abc.abstractmethod
    def CreateClassInstance(self) -> IInstantiable_1_TINSTANCE: ...


class IInterfaceClassContainer(ICAEXObject, IEnumerable_1[InterfaceFamilyType], typing.Protocol):
    @property
    def InterfaceClass(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[InterfaceFamilyType]: ...


class IInterfaceMapping(IMapping, typing.Protocol):
    @property
    def RoleInterface(self) -> ExternalInterfaceType: ...
    @RoleInterface.setter
    def RoleInterface(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
    @property
    def SystemUnitInterface(self) -> ExternalInterfaceType: ...
    @SystemUnitInterface.setter
    def SystemUnitInterface(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...


class IInternalElementContainer(ICAEXObject, IEnumerable_1[InternalElementType], typing.Protocol):
    @property
    def InternalElement(self) -> InternalElementSequence: ...


class IMapping(ICAEXBasicObject, typing.Protocol):
    @property
    def MappingObject(self) -> MappingType: ...


class IMappingElementType(IMapping, typing.Protocol):
    @property
    def MappingRoleClass(self) -> RoleFamilyType: ...
    @property
    def MappingSystemUnitClass(self) -> SystemUnitClassType: ...
    @property
    def RoleClassElementIdentifier(self) -> str: ...
    @RoleClassElementIdentifier.setter
    def RoleClassElementIdentifier(self, value: str) -> str: ...
    @property
    def SystemUnitClassElementIdentifier(self) -> str: ...
    @SystemUnitClassElementIdentifier.setter
    def SystemUnitClassElementIdentifier(self, value: str) -> str: ...


class IMirror_GenericClasses(abc.ABCMeta):
    Generic_IMirror_GenericClasses_IMirror_1_T = typing.TypeVar('Generic_IMirror_GenericClasses_IMirror_1_T')
    def __getitem__(self, types : typing.Type[Generic_IMirror_GenericClasses_IMirror_1_T]) -> typing.Type[IMirror_1[Generic_IMirror_GenericClasses_IMirror_1_T]]: ...

class IMirror(IMirror_0, metaclass =IMirror_GenericClasses): ...

class IMirror_0(ICAEXObject, typing.Protocol):
    @property
    def IsMaster(self) -> bool: ...
    @property
    def IsMirror(self) -> bool: ...
    @property
    def Master(self) -> CAEXObject: ...
    @property
    def MasterID(self) -> str: ...
    @abc.abstractmethod
    def CreateMirror(self) -> CAEXObject: ...


IMirror_1_T = typing.TypeVar('IMirror_1_T')
class IMirror_1(typing.Generic[IMirror_1_T], IMirror_0, typing.Protocol):
    @property
    def Master(self) -> IMirror_1_T: ...
    @abc.abstractmethod
    def CreateMirror(self) -> IMirror_1_T: ...


class IMultipleOccurrences_GenericClasses(abc.ABCMeta):
    Generic_IMultipleOccurrences_GenericClasses_IMultipleOccurrences_1_T = typing.TypeVar('Generic_IMultipleOccurrences_GenericClasses_IMultipleOccurrences_1_T')
    def __getitem__(self, types : typing.Type[Generic_IMultipleOccurrences_GenericClasses_IMultipleOccurrences_1_T]) -> typing.Type[IMultipleOccurrences_1[Generic_IMultipleOccurrences_GenericClasses_IMultipleOccurrences_1_T]]: ...

IMultipleOccurrences : IMultipleOccurrences_GenericClasses

IMultipleOccurrences_1_T = typing.TypeVar('IMultipleOccurrences_1_T', contravariant=True)
class IMultipleOccurrences_1(typing.Generic[IMultipleOccurrences_1_T], ICAEXBasicObject, typing.Protocol):
    @abc.abstractmethod
    def InsertAfter(self, caexObject: IMultipleOccurrences_1_T) -> None: ...
    @abc.abstractmethod
    def InsertBefore(self, caexObject: IMultipleOccurrences_1_T) -> None: ...


class InstanceHierarchyType(CAEXLibrary_1[InternalElementType], IInternalElementContainer):
    def __init__(self, instanceHierarchyNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @classmethod
    @property
    def Constructor(cls) -> Func_2[XElement, InstanceHierarchyType]: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def InternalElement(self) -> InternalElementSequence: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Item(self) -> InternalElementType: ...
    @property
    def Item(self) -> InternalElementType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class InterfaceClassLibType(CAEXLibrary_1[InterfaceFamilyType], IInterfaceClassContainer):
    def __init__(self, interfaceClassLibNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def InterfaceClass(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[InterfaceFamilyType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Item(self) -> InterfaceFamilyType: ...
    @property
    def Item(self) -> InterfaceFamilyType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class InterfaceClassType(CaexObjectWithReference_1[InterfaceClassType], IObjectWithExternalInterface):
    def __init__(self, interfaceClassNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def BaseClass(self) -> InterfaceFamilyType: ...
    @BaseClass.setter
    def BaseClass(self, value: InterfaceFamilyType) -> InterfaceFamilyType: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalInterface(self) -> ExternalInterfaceSequence: ...
    @property
    def ExternalInterfaceAndDescendants(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefBaseClassPath(self) -> str: ...
    @RefBaseClassPath.setter
    def RefBaseClassPath(self, value: str) -> str: ...
    @property
    def Reference(self) -> InterfaceClassType: ...
    @Reference.setter
    def Reference(self, value: InterfaceClassType) -> InterfaceClassType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    # Operator not supported op_Implicit(interfaceClass: InterfaceClassType)
    # Skipped Container due to it being static, abstract and generic.

    Container : Container_MethodGroup
    class Container_MethodGroup:
        def __getitem__(self, t:typing.Type[Container_1_T1]) -> Container_1[Container_1_T1]: ...

        Container_1_T1 = typing.TypeVar('Container_1_T1')
        class Container_1(typing.Generic[Container_1_T1]):
            Container_1_T = InterfaceClassType.Container_MethodGroup.Container_1_T1
            def __call__(self) -> CAEXSequence_1[Container_1_T]:...


    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class InterfaceFamilyType(InterfaceClassType, IClassWithExternalInterface, IClassWithBaseClassReference_1[InterfaceFamilyType], IInstantiable_1[ExternalInterfaceType], IInterfaceClassContainer, IObjectWithInheritedAttributes):
    def __init__(self, node: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def AttributeAndInherited(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def BaseClass(self) -> InterfaceFamilyType: ...
    @BaseClass.setter
    def BaseClass(self, value: InterfaceFamilyType) -> InterfaceFamilyType: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalInterface(self) -> ExternalInterfaceSequence: ...
    @property
    def ExternalInterfaceAndDescendants(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def ExternalInterfaceAndInherited(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def InterfaceClass(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[InterfaceFamilyType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefBaseClassPath(self) -> str: ...
    @RefBaseClassPath.setter
    def RefBaseClassPath(self, value: str) -> str: ...
    @property
    def Reference(self) -> InterfaceClassType: ...
    @Reference.setter
    def Reference(self, value: InterfaceClassType) -> InterfaceClassType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def ReferencedClassName(self) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    def CreateClassInstance(self) -> ExternalInterfaceType: ...
    def GetEnumerator(self) -> IEnumerator_1[InterfaceFamilyType]: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    def Remove(self, removeRelations: bool = ...) -> None: ...
    # Skipped Container due to it being static, abstract and generic.

    Container : Container_MethodGroup
    class Container_MethodGroup:
        def __getitem__(self, t:typing.Type[Container_1_T1]) -> Container_1[Container_1_T1]: ...

        Container_1_T1 = typing.TypeVar('Container_1_T1')
        class Container_1(typing.Generic[Container_1_T1]):
            Container_1_T = InterfaceFamilyType.Container_MethodGroup.Container_1_T1
            def __call__(self) -> CAEXSequence_1[Container_1_T]:...


    # Skipped GetReferenceHierarchy due to it being static, abstract and generic.

    GetReferenceHierarchy : GetReferenceHierarchy_MethodGroup
    class GetReferenceHierarchy_MethodGroup:
        def __getitem__(self, t:typing.Type[GetReferenceHierarchy_1_T1]) -> GetReferenceHierarchy_1[GetReferenceHierarchy_1_T1]: ...

        GetReferenceHierarchy_1_T1 = typing.TypeVar('GetReferenceHierarchy_1_T1')
        class GetReferenceHierarchy_1(typing.Generic[GetReferenceHierarchy_1_T1]):
            GetReferenceHierarchy_1_T = InterfaceFamilyType.GetReferenceHierarchy_MethodGroup.GetReferenceHierarchy_1_T1
            def __call__(self) -> Queue_1[GetReferenceHierarchy_1_T]:...

        def __call__(self) -> IEnumerable_1[InterfaceFamilyType]:...

    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class InterfaceIDMappingType(MappingElementType_1[ExternalInterfaceType], IInterfaceMapping):
    def __init__(self, nodeElement: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def MappingObject(self) -> MappingType: ...
    @property
    def MappingRoleClass(self) -> RoleFamilyType: ...
    @property
    def MappingRoleReference(self) -> IObjectWithRoleReference: ...
    @property
    def MappingSystemUnitClass(self) -> SystemUnitClassType: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleClassElement(self) -> ExternalInterfaceType: ...
    @RoleClassElement.setter
    def RoleClassElement(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
    @property
    def RoleClassElementIdentifier(self) -> str: ...
    @RoleClassElementIdentifier.setter
    def RoleClassElementIdentifier(self, value: str) -> str: ...
    @property
    def RoleInterface(self) -> ExternalInterfaceType: ...
    @RoleInterface.setter
    def RoleInterface(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
    @property
    def RoleInterfaceID(self) -> str: ...
    @RoleInterfaceID.setter
    def RoleInterfaceID(self, value: str) -> str: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def SystemUnitClassElement(self) -> ExternalInterfaceType: ...
    @SystemUnitClassElement.setter
    def SystemUnitClassElement(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
    @property
    def SystemUnitClassElementIdentifier(self) -> str: ...
    @SystemUnitClassElementIdentifier.setter
    def SystemUnitClassElementIdentifier(self, value: str) -> str: ...
    @property
    def SystemUnitClassMappingElements(self) -> IEnumerable_1[ValueTuple_2[ExternalInterfaceType, str]]: ...
    @property
    def SystemUnitInterface(self) -> ExternalInterfaceType: ...
    @SystemUnitInterface.setter
    def SystemUnitInterface(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
    @property
    def SystemUnitInterfaceID(self) -> str: ...
    @SystemUnitInterfaceID.setter
    def SystemUnitInterfaceID(self, value: str) -> str: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def RoleClassMappingElements(self, includeDuplicates: bool = ...) -> IEnumerable_1[ValueTuple_2[ExternalInterfaceType, str]]: ...


class InterfaceNameMappingType(MappingElementType_1[ExternalInterfaceType], IInterfaceMapping):
    def __init__(self, nodeElement: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def MappingObject(self) -> MappingType: ...
    @property
    def MappingRoleClass(self) -> RoleFamilyType: ...
    @property
    def MappingRoleReference(self) -> IObjectWithRoleReference: ...
    @property
    def MappingSystemUnitClass(self) -> SystemUnitClassType: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleClassElement(self) -> ExternalInterfaceType: ...
    @RoleClassElement.setter
    def RoleClassElement(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
    @property
    def RoleClassElementIdentifier(self) -> str: ...
    @RoleClassElementIdentifier.setter
    def RoleClassElementIdentifier(self, value: str) -> str: ...
    @property
    def RoleInterface(self) -> ExternalInterfaceType: ...
    @RoleInterface.setter
    def RoleInterface(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
    @property
    def RoleInterfaceName(self) -> str: ...
    @RoleInterfaceName.setter
    def RoleInterfaceName(self, value: str) -> str: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def SystemUnitClassElement(self) -> ExternalInterfaceType: ...
    @SystemUnitClassElement.setter
    def SystemUnitClassElement(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
    @property
    def SystemUnitClassElementIdentifier(self) -> str: ...
    @SystemUnitClassElementIdentifier.setter
    def SystemUnitClassElementIdentifier(self, value: str) -> str: ...
    @property
    def SystemUnitClassMappingElements(self) -> IEnumerable_1[ValueTuple_2[ExternalInterfaceType, str]]: ...
    @property
    def SystemUnitInterface(self) -> ExternalInterfaceType: ...
    @SystemUnitInterface.setter
    def SystemUnitInterface(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
    @property
    def SystemUnitInterfaceName(self) -> str: ...
    @SystemUnitInterfaceName.setter
    def SystemUnitInterfaceName(self, value: str) -> str: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def RoleClassMappingElements(self, includeDuplicates: bool = ...) -> IEnumerable_1[ValueTuple_2[ExternalInterfaceType, str]]: ...


class InternalElementSequence(CAEXSequenceOfCAEXObjectsWithReference_1[InternalElementType]):
    def __init__(self, owner: XElement, create: Func_2[XElement, InternalElementType]) -> None: ...
    @property
    def CAEXOwner(self) -> CAEXWrapper: ...
    @property
    def Count(self) -> int: ...
    @property
    def ElementName(self) -> XName: ...
    @ElementName.setter
    def ElementName(self, value: XName) -> XName: ...
    @property
    def Elements(self) -> IEnumerable_1[XElement]: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def First(self) -> InternalElementType: ...
    @property
    def IsOwnerDefined(self) -> bool: ...
    @property
    def Item(self) -> InternalElementType: ...
    @property
    def Item(self) -> InternalElementType: ...
    @property
    def Item(self) -> InternalElementType: ...
    @Item.setter
    def Item(self, value: InternalElementType) -> InternalElementType: ...
    @property
    def Item(self) -> InternalElementType: ...
    @property
    def Last(self) -> InternalElementType: ...
    @property
    def Owner(self) -> XElement: ...
    def AddNewMirror(self, masterInternalElement: InternalElementType) -> InternalElementType: ...
    def InternalElementDescendantsAndSelf(self) -> IEnumerable_1[InternalElementType]: ...


class InternalElementType(SystemUnitClassType, IMirror_1[InternalElementType], ISplitPoint, IInstance):
    def __init__(self, nodeElement: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalInterface(self) -> ExternalInterfaceSequence: ...
    @property
    def ExternalInterfaceAndDescendants(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def InternalElement(self) -> InternalElementSequence: ...
    @property
    def InternalLink(self) -> CAEXSequenceOfCAEXObjects_1[InternalLinkType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def IsMirror(self) -> bool: ...
    @property
    def MappingObject(self) -> MappingType: ...
    @property
    def Master(self) -> InternalElementType: ...
    @Master.setter
    def Master(self, value: InternalElementType) -> InternalElementType: ...
    @property
    def MasterID(self) -> str: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefBaseSystemUnitPath(self) -> str: ...
    @RefBaseSystemUnitPath.setter
    def RefBaseSystemUnitPath(self, value: str) -> str: ...
    @property
    def Reference(self) -> SystemUnitClassType: ...
    @Reference.setter
    def Reference(self, value: SystemUnitClassType) -> SystemUnitClassType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleReferences(self) -> IEnumerable_1[IObjectWithRoleReference]: ...
    @property
    def RoleRequirements(self) -> CAEXSequence_1[RoleRequirementsType]: ...
    @property
    def Roles(self) -> IEnumerable_1[RoleFamilyType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def SupportedRoleClass(self) -> CAEXSequence_1[SupportedRoleClassType]: ...
    @property
    def SystemUnitClass(self) -> SystemUnitFamilyType: ...
    @SystemUnitClass.setter
    def SystemUnitClass(self, value: SystemUnitFamilyType) -> SystemUnitFamilyType: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    def CreateMirror(self) -> InternalElementType: ...
    def CreateSystemUnitClass(self) -> SystemUnitFamilyType: ...
    def HasSystemUnitClassReference(self, systemUnitClass: SystemUnitFamilyType, regardInheritance: bool = ...) -> bool: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    def New_MappingObject(self) -> MappingType: ...
    def ReplaceRoleClassReference(self, roleClass: RoleFamilyType, addSupportedRoleClass: bool = ...) -> IObjectWithRoleReference: ...
    def UpdateInstance(self) -> bool: ...
    # Skipped AddRoleClassReference due to it being static, abstract and generic.

    AddRoleClassReference : AddRoleClassReference_MethodGroup
    class AddRoleClassReference_MethodGroup:
        @typing.overload
        def __call__(self, roleClassReference: str, addUnique: bool = ..., addInstance: bool = ...) -> IObjectWithRoleReference:...
        @typing.overload
        def __call__(self, roleClass: RoleFamilyType, addSupportedRoleClass: bool = ..., addUnique: bool = ..., addInstance: bool = ...) -> IObjectWithRoleReference:...

    # Skipped HasGenericRoleClassReference due to it being static, abstract and generic.

    HasGenericRoleClassReference : HasGenericRoleClassReference_MethodGroup
    class HasGenericRoleClassReference_MethodGroup:
        @typing.overload
        def __call__(self, specificRoleClass: RoleFamilyType) -> bool:...
        @typing.overload
        def __call__(self, roleReference: str) -> bool:...

    # Skipped HasRoleClassReference due to it being static, abstract and generic.

    HasRoleClassReference : HasRoleClassReference_MethodGroup
    class HasRoleClassReference_MethodGroup:
        @typing.overload
        def __call__(self, roleClass: RoleFamilyType, regardInheritance: bool = ...) -> bool:...
        @typing.overload
        def __call__(self, roleReference: str, regardInheritance: bool = ...) -> bool:...

    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class InternalLinkType(CAEXObject, IMultipleOccurrences_1[InternalLinkType]):
    def __init__(self, nodeElement: XElement) -> None: ...
    LINK_SEPARATOR : str
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def AInterface(self) -> ExternalInterfaceType: ...
    @AInterface.setter
    def AInterface(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
    @property
    def ASystemUnitClass(self) -> SystemUnitClassType: ...
    @property
    def BInterface(self) -> ExternalInterfaceType: ...
    @BInterface.setter
    def BInterface(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
    @property
    def BSystemUnitClass(self) -> SystemUnitClassType: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDefined(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefPartnerSideA(self) -> str: ...
    @RefPartnerSideA.setter
    def RefPartnerSideA(self, value: str) -> str: ...
    @property
    def RefPartnerSideB(self) -> str: ...
    @RefPartnerSideB.setter
    def RefPartnerSideB(self, value: str) -> str: ...
    @property
    def RelatedObjects(self) -> InternalLinkType.LinkedObjects: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def InsertAfter(self, caexObject: InternalLinkType) -> None: ...
    def InsertBefore(self, caexObject: InternalLinkType) -> None: ...
    def InterfaceFromAttributeValue(self, internalLinkAttributeValue: str) -> ExternalInterfaceType: ...
    @staticmethod
    def New_InternalLink(aInterface: ExternalInterfaceType, bInterface: ExternalInterfaceType, name: str) -> InternalLinkType: ...

    class LinkedObjects:
        def __init__(self) -> None: ...
        @property
        def AInterface(self) -> ExternalInterfaceType: ...
        @AInterface.setter
        def AInterface(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
        @property
        def ASystemUnitClass(self) -> SystemUnitClassType: ...
        @property
        def BInterface(self) -> ExternalInterfaceType: ...
        @BInterface.setter
        def BInterface(self, value: ExternalInterfaceType) -> ExternalInterfaceType: ...
        @property
        def BSystemUnitClass(self) -> SystemUnitClassType: ...



class IObjectWithAttributes(ICAEXWrapper, typing.Protocol):
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...


class IObjectWithExternalInterface(IObjectWithAttributes, typing.Protocol):
    @property
    def ExternalInterface(self) -> ExternalInterfaceSequence: ...
    @property
    def ExternalInterfaceAndDescendants(self) -> IEnumerable_1[ExternalInterfaceType]: ...


class IObjectWithExternalInterfaceAndInherited(IObjectWithExternalInterface, typing.Protocol):
    @property
    def ExternalInterfaceAndInherited(self) -> IEnumerable_1[ExternalInterfaceType]: ...


class IObjectWithInheritedAttributes(IObjectWithAttributes, typing.Protocol):
    @property
    def AttributeAndInherited(self) -> IEnumerable_1[AttributeType]: ...


class IObjectWithRoleReference(ICAEXWrapper, typing.Protocol):
    @property
    def RoleClass(self) -> RoleFamilyType: ...
    @RoleClass.setter
    def RoleClass(self, value: RoleFamilyType) -> RoleFamilyType: ...
    @property
    def RoleReference(self) -> str: ...
    @RoleReference.setter
    def RoleReference(self, value: str) -> str: ...


class IRoleClassContainer(ICAEXObject, IEnumerable_1[RoleFamilyType], typing.Protocol):
    @property
    def RoleClass(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[RoleFamilyType]: ...


class ISystemUnitClassContainer(ICAEXObject, IEnumerable_1[SystemUnitFamilyType], typing.Protocol):
    @property
    def SystemUnitClass(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[SystemUnitFamilyType]: ...


class MappingElementType_GenericClasses(abc.ABCMeta):
    Generic_MappingElementType_GenericClasses_MappingElementType_1_T = typing.TypeVar('Generic_MappingElementType_GenericClasses_MappingElementType_1_T')
    def __getitem__(self, types : typing.Type[Generic_MappingElementType_GenericClasses_MappingElementType_1_T]) -> typing.Type[MappingElementType_1[Generic_MappingElementType_GenericClasses_MappingElementType_1_T]]: ...

MappingElementType : MappingElementType_GenericClasses

MappingElementType_1_T = typing.TypeVar('MappingElementType_1_T')
class MappingElementType_1(typing.Generic[MappingElementType_1_T], CAEXBasicObject, IMappingElementType, abc.ABC):
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def MappingObject(self) -> MappingType: ...
    @property
    def MappingRoleClass(self) -> RoleFamilyType: ...
    @property
    def MappingRoleReference(self) -> IObjectWithRoleReference: ...
    @property
    def MappingSystemUnitClass(self) -> SystemUnitClassType: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleClassElement(self) -> MappingElementType_1_T: ...
    @RoleClassElement.setter
    def RoleClassElement(self, value: MappingElementType_1_T) -> MappingElementType_1_T: ...
    @property
    def RoleClassElementIdentifier(self) -> str: ...
    @RoleClassElementIdentifier.setter
    def RoleClassElementIdentifier(self, value: str) -> str: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def SystemUnitClassElement(self) -> MappingElementType_1_T: ...
    @SystemUnitClassElement.setter
    def SystemUnitClassElement(self, value: MappingElementType_1_T) -> MappingElementType_1_T: ...
    @property
    def SystemUnitClassElementIdentifier(self) -> str: ...
    @SystemUnitClassElementIdentifier.setter
    def SystemUnitClassElementIdentifier(self, value: str) -> str: ...
    @property
    def SystemUnitClassMappingElements(self) -> IEnumerable_1[ValueTuple_2[MappingElementType_1_T, str]]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def AddRoleClassElement(self, element: MappingElementType_1_T) -> None: ...
    @abc.abstractmethod
    def RoleClassMappingElements(self, includeDuplicates: bool = ...) -> IEnumerable_1[ValueTuple_2[MappingElementType_1_T, str]]: ...


class MappingType(CAEXBasicObject):
    def __init__(self, nodeElement: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def AttributeNameMapping(self) -> CAEXSequence_1[AttributeNameMappingType]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def InterfaceIDMapping(self) -> CAEXSequence_1[InterfaceIDMappingType]: ...
    @property
    def InterfaceNameMapping(self) -> CAEXSequence_1[InterfaceNameMappingType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class NamedElementSequence_GenericClasses(abc.ABCMeta):
    Generic_NamedElementSequence_GenericClasses_NamedElementSequence_1_T = typing.TypeVar('Generic_NamedElementSequence_GenericClasses_NamedElementSequence_1_T')
    def __getitem__(self, types : typing.Type[Generic_NamedElementSequence_GenericClasses_NamedElementSequence_1_T]) -> typing.Type[NamedElementSequence_1[Generic_NamedElementSequence_GenericClasses_NamedElementSequence_1_T]]: ...

NamedElementSequence : NamedElementSequence_GenericClasses

NamedElementSequence_1_T = typing.TypeVar('NamedElementSequence_1_T')
class NamedElementSequence_1(typing.Generic[NamedElementSequence_1_T], IEnumerable_1[NamedElementSequence_1_T], abc.ABC):
    @property
    def CAEXOwner(self) -> CAEXWrapper: ...
    @property
    def Count(self) -> int: ...
    @property
    def ElementName(self) -> XName: ...
    @ElementName.setter
    def ElementName(self, value: XName) -> XName: ...
    @property
    def Elements(self) -> IEnumerable_1[XElement]: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsOwnerDefined(self) -> bool: ...
    @property
    def Item(self) -> NamedElementSequence_1_T: ...
    @Item.setter
    def Item(self, value: NamedElementSequence_1_T) -> NamedElementSequence_1_T: ...
    @property
    def Owner(self) -> XElement: ...
    @abc.abstractmethod
    def GetEnumerator(self) -> IEnumerator_1[NamedElementSequence_1_T]: ...
    def Remove(self) -> None: ...
    def RemoveAt(self, index: int) -> bool: ...


class NominalScaledTypeType(CAEXWrapper_0, IAttributeValueType):
    def __init__(self, nodeElement: XElement) -> None: ...
    @property
    def AttributeDataType(self) -> str: ...
    @property
    def AttributeTypeDefiningAttribute(self) -> AttributeTypeType: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Item(self) -> typing.Any: ...
    @Item.setter
    def Item(self, value: typing.Any) -> typing.Any: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RequiredValue(self) -> ValueSequence_1[str]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def ValueAttributes(self) -> List_1[CaexValue]: ...
    def GetCaexValue(self, nominalValue: str) -> CaexValue: ...


class OrdinalScaledTypeType(CAEXWrapper_0, IAttributeValueType):
    def __init__(self, ordinalScaledTypeNode: XElement) -> None: ...
    @property
    def AttributeDataType(self) -> str: ...
    @property
    def AttributeTypeDefiningAttribute(self) -> AttributeTypeType: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Item(self) -> typing.Any: ...
    @Item.setter
    def Item(self, value: typing.Any) -> typing.Any: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RequiredMaxValue(self) -> str: ...
    @RequiredMaxValue.setter
    def RequiredMaxValue(self, value: str) -> str: ...
    @property
    def RequiredMinValue(self) -> str: ...
    @RequiredMinValue.setter
    def RequiredMinValue(self, value: str) -> str: ...
    @property
    def RequiredValue(self) -> str: ...
    @RequiredValue.setter
    def RequiredValue(self, value: str) -> str: ...
    @property
    def TagName(self) -> str: ...
    @property
    def ValueAttributes(self) -> List_1[CaexValue]: ...
    def GetCaexValue(self, attributeName: str) -> CaexValue: ...


class RefSemanticType(CAEXBasicObject):
    def __init__(self, refSemanticNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def CorrespondingAttributePath(self) -> str: ...
    @CorrespondingAttributePath.setter
    def CorrespondingAttributePath(self, value: str) -> str: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...


class RevisionType(CAEXBasicObject):
    def __init__(self, revisionNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def AuthorName(self) -> str: ...
    @AuthorName.setter
    def AuthorName(self, value: str) -> str: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Comment(self) -> str: ...
    @Comment.setter
    def Comment(self, value: str) -> str: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def NewVersion(self) -> str: ...
    @NewVersion.setter
    def NewVersion(self, value: str) -> str: ...
    @property
    def NewVersionObject(self) -> CAEXObject: ...
    @NewVersionObject.setter
    def NewVersionObject(self, value: CAEXObject) -> CAEXObject: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def OldVersion(self) -> str: ...
    @OldVersion.setter
    def OldVersion(self, value: str) -> str: ...
    @property
    def OldVersionObject(self) -> CAEXObject: ...
    @OldVersionObject.setter
    def OldVersionObject(self, value: CAEXObject) -> CAEXObject: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RevisionDate(self) -> DateTime: ...
    @RevisionDate.setter
    def RevisionDate(self, value: DateTime) -> DateTime: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...


class RoleClassLibType(CAEXLibrary_1[RoleFamilyType], IRoleClassContainer):
    def __init__(self, roleClassLibNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Item(self) -> RoleFamilyType: ...
    @property
    def Item(self) -> RoleFamilyType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleClass(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[RoleFamilyType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class RoleClassType(CaexObjectWithReference_1[RoleClassType], IObjectWithExternalInterface):
    def __init__(self, roleClassNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalInterface(self) -> ExternalInterfaceSequence: ...
    @property
    def ExternalInterfaceAndDescendants(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Reference(self) -> RoleClassType: ...
    @Reference.setter
    def Reference(self, value: RoleClassType) -> RoleClassType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    # Operator not supported op_Implicit(caexObject: RoleClassType)
    # Skipped Container due to it being static, abstract and generic.

    Container : Container_MethodGroup
    class Container_MethodGroup:
        def __getitem__(self, t:typing.Type[Container_1_T1]) -> Container_1[Container_1_T1]: ...

        Container_1_T1 = typing.TypeVar('Container_1_T1')
        class Container_1(typing.Generic[Container_1_T1]):
            Container_1_T = RoleClassType.Container_MethodGroup.Container_1_T1
            def __call__(self) -> CAEXSequence_1[Container_1_T]:...


    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class RoleFamilyType(RoleClassType, IClassWithExternalInterface, IClassWithBaseClassReference_1[RoleFamilyType], IInstantiable_1[RoleRequirementsType], IRoleClassContainer, IObjectWithInheritedAttributes):
    def __init__(self, roleClassNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def AttributeAndInherited(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def BaseClass(self) -> RoleFamilyType: ...
    @BaseClass.setter
    def BaseClass(self, value: RoleFamilyType) -> RoleFamilyType: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalInterface(self) -> ExternalInterfaceSequence: ...
    @property
    def ExternalInterfaceAndDescendants(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def ExternalInterfaceAndInherited(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefBaseClassPath(self) -> str: ...
    @RefBaseClassPath.setter
    def RefBaseClassPath(self, value: str) -> str: ...
    @property
    def Reference(self) -> RoleClassType: ...
    @Reference.setter
    def Reference(self, value: RoleClassType) -> RoleClassType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def ReferencedClassName(self) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleClass(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[RoleFamilyType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    def CreateClassInstance(self) -> RoleRequirementsType: ...
    def CreateSupportedRoleClass(self) -> SupportedRoleClassType: ...
    def GetEnumerator(self) -> IEnumerator_1[RoleFamilyType]: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    def Remove(self, removeRelations: bool = ...) -> None: ...
    # Skipped Container due to it being static, abstract and generic.

    Container : Container_MethodGroup
    class Container_MethodGroup:
        def __getitem__(self, t:typing.Type[Container_1_T1]) -> Container_1[Container_1_T1]: ...

        Container_1_T1 = typing.TypeVar('Container_1_T1')
        class Container_1(typing.Generic[Container_1_T1]):
            Container_1_T = RoleFamilyType.Container_MethodGroup.Container_1_T1
            def __call__(self) -> CAEXSequence_1[Container_1_T]:...


    # Skipped GetReferenceHierarchy due to it being static, abstract and generic.

    GetReferenceHierarchy : GetReferenceHierarchy_MethodGroup
    class GetReferenceHierarchy_MethodGroup:
        def __getitem__(self, t:typing.Type[GetReferenceHierarchy_1_T1]) -> GetReferenceHierarchy_1[GetReferenceHierarchy_1_T1]: ...

        GetReferenceHierarchy_1_T1 = typing.TypeVar('GetReferenceHierarchy_1_T1')
        class GetReferenceHierarchy_1(typing.Generic[GetReferenceHierarchy_1_T1]):
            GetReferenceHierarchy_1_T = RoleFamilyType.GetReferenceHierarchy_MethodGroup.GetReferenceHierarchy_1_T1
            def __call__(self) -> Queue_1[GetReferenceHierarchy_1_T]:...

        def __call__(self) -> IEnumerable_1[RoleFamilyType]:...

    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class RoleRequirementsType(CAEXBasicObject, IObjectWithExternalInterface, IObjectWithRoleReference, IInstance):
    def __init__(self, roleRequirementsNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalInterface(self) -> ExternalInterfaceSequence: ...
    @property
    def ExternalInterfaceAndDescendants(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def MappingObject(self) -> MappingType: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def QualifiedAttributes(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def QualifiedExternalInterfaces(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def QualifiedRoleClassAttributes(self) -> IEnumerable_1[ValueTuple_2[RoleClassType, AttributeType]]: ...
    @property
    def QualifiedRoleClassInterfaces(self) -> IEnumerable_1[ValueTuple_2[RoleClassType, ExternalInterfaceType]]: ...
    @property
    def RefBaseRoleClassPath(self) -> str: ...
    @RefBaseRoleClassPath.setter
    def RefBaseRoleClassPath(self, value: str) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleClass(self) -> RoleFamilyType: ...
    @RoleClass.setter
    def RoleClass(self, value: RoleFamilyType) -> RoleFamilyType: ...
    @property
    def RoleReference(self) -> str: ...
    @RoleReference.setter
    def RoleReference(self, value: str) -> str: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def UnAssignedQualifiedRoleClassAttributesOfMultipleRoles(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def UnAssignedQualifiedRoleClassInterfacesOfMultipleRoles(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def AssignQualifiedRoleClassAttribute(self, attribute: AttributeType) -> AttributeType: ...
    def AssignQualifiedRoleClassInterface(self, externalInterface: ExternalInterfaceType) -> ExternalInterfaceType: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    def HasRoleClassReference(self, roleClass: RoleFamilyType, regardInheritance: bool = ...) -> bool: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    def IsAssignableRoleClassAttribute(self, attribute: AttributeType) -> bool: ...
    def IsAssignableRoleClassInterface(self, externalInterface: ExternalInterfaceType) -> bool: ...
    def New_MappingObject(self) -> MappingType: ...
    # Operator not supported op_Implicit(roleRequirement: RoleRequirementsType)
    def UpdateInstance(self) -> bool: ...
    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class SourceDocumentInformationType(CAEXWrapper_0):
    def __init__(self, sourceDocumentInformationNode: XElement) -> None: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def LastWritingDateTime(self) -> DateTime: ...
    @LastWritingDateTime.setter
    def LastWritingDateTime(self, value: DateTime) -> DateTime: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def OriginID(self) -> str: ...
    @OriginID.setter
    def OriginID(self, value: str) -> str: ...
    @property
    def OriginName(self) -> str: ...
    @OriginName.setter
    def OriginName(self, value: str) -> str: ...
    @property
    def OriginProjectID(self) -> str: ...
    @OriginProjectID.setter
    def OriginProjectID(self, value: str) -> str: ...
    @property
    def OriginProjectTitle(self) -> str: ...
    @OriginProjectTitle.setter
    def OriginProjectTitle(self, value: str) -> str: ...
    @property
    def OriginRelease(self) -> str: ...
    @OriginRelease.setter
    def OriginRelease(self, value: str) -> str: ...
    @property
    def OriginVendor(self) -> str: ...
    @OriginVendor.setter
    def OriginVendor(self, value: str) -> str: ...
    @property
    def OriginVendorURL(self) -> str: ...
    @OriginVendorURL.setter
    def OriginVendorURL(self, value: str) -> str: ...
    @property
    def OriginVersion(self) -> str: ...
    @OriginVersion.setter
    def OriginVersion(self, value: str) -> str: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def TagName(self) -> str: ...


class SourceObjectInformationType(CAEXWrapper_1[str]):
    def __init__(self, sourceObjectInformationNode: XElement) -> None: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def OriginID(self) -> str: ...
    @OriginID.setter
    def OriginID(self, value: str) -> str: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def SourceObjID(self) -> str: ...
    @SourceObjID.setter
    def SourceObjID(self, value: str) -> str: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> str: ...


class SupportedRoleClassType(CAEXBasicObject, IObjectWithRoleReference):
    def __init__(self, supportedRoleClassNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def MappingObject(self) -> MappingType: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefRoleClassPath(self) -> str: ...
    @RefRoleClassPath.setter
    def RefRoleClassPath(self, value: str) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleClass(self) -> RoleFamilyType: ...
    @RoleClass.setter
    def RoleClass(self, value: RoleFamilyType) -> RoleFamilyType: ...
    @property
    def RoleReference(self) -> str: ...
    @RoleReference.setter
    def RoleReference(self, value: str) -> str: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def SystemUnitClass(self) -> SystemUnitClassType: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    def New_MappingObject(self) -> MappingType: ...
    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class SystemUnitClassLibType(CAEXLibrary_1[SystemUnitFamilyType], ISystemUnitClassContainer):
    def __init__(self, systemUnitClassLibNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Item(self) -> SystemUnitFamilyType: ...
    @property
    def Item(self) -> SystemUnitFamilyType: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def SystemUnitClass(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[SystemUnitFamilyType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class SystemUnitClassType(CaexObjectWithReference_1[SystemUnitClassType], IInternalElementContainer, IObjectWithExternalInterface, IMultipleOccurrences_1[InternalElementType]):
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalInterface(self) -> ExternalInterfaceSequence: ...
    @property
    def ExternalInterfaceAndDescendants(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def InternalElement(self) -> InternalElementSequence: ...
    @property
    def InternalLink(self) -> CAEXSequenceOfCAEXObjects_1[InternalLinkType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Reference(self) -> SystemUnitClassType: ...
    @Reference.setter
    def Reference(self, value: SystemUnitClassType) -> SystemUnitClassType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleReferences(self) -> IEnumerable_1[IObjectWithRoleReference]: ...
    @property
    def Roles(self) -> IEnumerable_1[RoleFamilyType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def SupportedRoleClass(self) -> CAEXSequence_1[SupportedRoleClassType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    def GetEnumerator(self) -> IEnumerator_1[InternalElementType]: ...
    def HasInterfaceClassReference(self, interfaceClass: InterfaceFamilyType, regardInheritance: bool = ...) -> bool: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    def InsertAfter(self, caexObject: InternalElementType) -> None: ...
    def InsertBefore(self, caexObject: InternalElementType) -> None: ...
    def LowestCommonParent(self, systemUnitClass: SystemUnitClassType) -> SystemUnitClassType: ...
    # Operator not supported op_Implicit(caexObject: SystemUnitClassType)
    def SupportedRoleClassWithName(self, roleClassName: str) -> RoleFamilyType: ...
    # Skipped AddInterfaceClassReference due to it being static, abstract and generic.

    AddInterfaceClassReference : AddInterfaceClassReference_MethodGroup
    class AddInterfaceClassReference_MethodGroup:
        @typing.overload
        def __call__(self, interfaceClass: InterfaceFamilyType, addUnique: bool = ..., addInstance: bool = ..., name: str = ...) -> ExternalInterfaceType:...
        @typing.overload
        def __call__(self, interfaceClassReference: str, addUnique: bool = ..., addInstance: bool = ..., name: str = ...) -> ExternalInterfaceType:...

    # Skipped Container due to it being static, abstract and generic.

    Container : Container_MethodGroup
    class Container_MethodGroup:
        def __getitem__(self, t:typing.Type[Container_1_T1]) -> Container_1[Container_1_T1]: ...

        Container_1_T1 = typing.TypeVar('Container_1_T1')
        class Container_1(typing.Generic[Container_1_T1]):
            Container_1_T = SystemUnitClassType.Container_MethodGroup.Container_1_T1
            def __call__(self) -> CAEXSequence_1[Container_1_T]:...


    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class SystemUnitFamilyType(SystemUnitClassType, IClassWithExternalInterface, IClassWithBaseClassReference_1[SystemUnitFamilyType], IInstantiable_1[InternalElementType], ISystemUnitClassContainer, IObjectWithInheritedAttributes):
    def __init__(self, systemUnitClassNode: XElement) -> None: ...
    @property
    def AdditionalInformation(self) -> ValueSequence_1[typing.Any]: ...
    @property
    def Attribute(self) -> AttributeSequence: ...
    @property
    def AttributeAndDescendants(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def AttributeAndInherited(self) -> IEnumerable_1[AttributeType]: ...
    @property
    def BaseClass(self) -> SystemUnitFamilyType: ...
    @BaseClass.setter
    def BaseClass(self, value: SystemUnitFamilyType) -> SystemUnitFamilyType: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Copyright(self) -> str: ...
    @Copyright.setter
    def Copyright(self, value: str) -> str: ...
    @property
    def CopyrightElement(self) -> CopyrightType: ...
    @property
    def Description(self) -> str: ...
    @Description.setter
    def Description(self, value: str) -> str: ...
    @property
    def DescriptionElement(self) -> DescriptionType: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def ExternalInterface(self) -> ExternalInterfaceSequence: ...
    @property
    def ExternalInterfaceAndDescendants(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def ExternalInterfaceAndInherited(self) -> IEnumerable_1[ExternalInterfaceType]: ...
    @property
    def ID(self) -> str: ...
    @ID.setter
    def ID(self, value: str) -> str: ...
    @property
    def InternalElement(self) -> InternalElementSequence: ...
    @property
    def InternalElementAndInherited(self) -> IEnumerable_1[InternalElementType]: ...
    @property
    def InternalLink(self) -> CAEXSequenceOfCAEXObjects_1[InternalLinkType]: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Name(self) -> str: ...
    @Name.setter
    def Name(self, value: str) -> str: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def RefBaseClassPath(self) -> str: ...
    @RefBaseClassPath.setter
    def RefBaseClassPath(self, value: str) -> str: ...
    @property
    def Reference(self) -> SystemUnitClassType: ...
    @Reference.setter
    def Reference(self, value: SystemUnitClassType) -> SystemUnitClassType: ...
    @property
    def ReferenceAttributeName(self) -> str: ...
    @property
    def ReferencedClassName(self) -> str: ...
    @property
    def Revision(self) -> CAEXSequence_1[RevisionType]: ...
    @property
    def RoleReferences(self) -> IEnumerable_1[IObjectWithRoleReference]: ...
    @property
    def Roles(self) -> IEnumerable_1[RoleFamilyType]: ...
    @property
    def SourceObjectInformation(self) -> CAEXSequence_1[SourceObjectInformationType]: ...
    @property
    def SupportedRoleClass(self) -> CAEXSequence_1[SupportedRoleClassType]: ...
    @property
    def SystemUnitClass(self) -> CAEXSequenceOfCAEXObjectsWithReference_1[SystemUnitFamilyType]: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Version(self) -> str: ...
    @Version.setter
    def Version(self, value: str) -> str: ...
    @property
    def VersionElement(self) -> VersionType: ...
    def CAEXSequence(self, caexObject: ICAEXWrapper) -> ICAEXSequence: ...
    def CreateClassInstance(self) -> InternalElementType: ...
    def GetEnumerator(self) -> IEnumerator_1[SystemUnitFamilyType]: ...
    def GetInheritedSupportedRoles(self) -> IEnumerable_1[SupportedRoleClassType]: ...
    def GetReferencedSystemUnitClass(self, systemUnitClassReference: str) -> SystemUnitFamilyType: ...
    def Import(self, caexObject: CAEXWrapper, name: str, withSubclasses: bool = ...) -> CAEXWrapper: ...
    def Remove(self, removeRelations: bool = ...) -> None: ...
    def ReplaceRoleClassReference(self, roleClass: RoleFamilyType) -> SupportedRoleClassType: ...
    # Skipped AddRoleClassReference due to it being static, abstract and generic.

    AddRoleClassReference : AddRoleClassReference_MethodGroup
    class AddRoleClassReference_MethodGroup:
        @typing.overload
        def __call__(self, roleClass: RoleFamilyType, addUnique: bool = ...) -> IObjectWithRoleReference:...
        @typing.overload
        def __call__(self, roleClassReference: str, addUnique: bool = ...) -> IObjectWithRoleReference:...

    # Skipped Container due to it being static, abstract and generic.

    Container : Container_MethodGroup
    class Container_MethodGroup:
        def __getitem__(self, t:typing.Type[Container_1_T1]) -> Container_1[Container_1_T1]: ...

        Container_1_T1 = typing.TypeVar('Container_1_T1')
        class Container_1(typing.Generic[Container_1_T1]):
            Container_1_T = SystemUnitFamilyType.Container_MethodGroup.Container_1_T1
            def __call__(self) -> CAEXSequence_1[Container_1_T]:...


    # Skipped GetReferenceHierarchy due to it being static, abstract and generic.

    GetReferenceHierarchy : GetReferenceHierarchy_MethodGroup
    class GetReferenceHierarchy_MethodGroup:
        def __getitem__(self, t:typing.Type[GetReferenceHierarchy_1_T1]) -> GetReferenceHierarchy_1[GetReferenceHierarchy_1_T1]: ...

        GetReferenceHierarchy_1_T1 = typing.TypeVar('GetReferenceHierarchy_1_T1')
        class GetReferenceHierarchy_1(typing.Generic[GetReferenceHierarchy_1_T1]):
            GetReferenceHierarchy_1_T = SystemUnitFamilyType.GetReferenceHierarchy_MethodGroup.GetReferenceHierarchy_1_T1
            def __call__(self) -> Queue_1[GetReferenceHierarchy_1_T]:...

        def __call__(self) -> IEnumerable_1[SystemUnitFamilyType]:...

    # Skipped HasGenericRoleClassReference due to it being static, abstract and generic.

    HasGenericRoleClassReference : HasGenericRoleClassReference_MethodGroup
    class HasGenericRoleClassReference_MethodGroup:
        @typing.overload
        def __call__(self, roleClass: RoleFamilyType) -> bool:...
        @typing.overload
        def __call__(self, roleReference: RoleRequirementsType) -> bool:...

    # Skipped HasRoleClassReference due to it being static, abstract and generic.

    HasRoleClassReference : HasRoleClassReference_MethodGroup
    class HasRoleClassReference_MethodGroup:
        @typing.overload
        def __call__(self, roleClass: RoleFamilyType, regardInheritanceOfRoleClasses: bool = ...) -> bool:...
        @typing.overload
        def __call__(self, roleClassReference: str, regardInheritance: bool = ...) -> bool:...

    # Skipped Insert due to it being static, abstract and generic.

    Insert : Insert_MethodGroup
    class Insert_MethodGroup:
        @typing.overload
        def __call__(self, pos: int, caexObject: CAEXWrapper) -> bool:...
        @typing.overload
        def __call__(self, caexObject: CAEXWrapper, asFirst: bool = ...) -> bool:...



class UnknownTypeType(CAEXWrapper_0):
    def __init__(self, unknownTypeNode: XElement) -> None: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def Requirements(self) -> str: ...
    @Requirements.setter
    def Requirements(self, value: str) -> str: ...
    @property
    def TagName(self) -> str: ...


class ValueSequence_GenericClasses(abc.ABCMeta):
    Generic_ValueSequence_GenericClasses_ValueSequence_1_TDataType = typing.TypeVar('Generic_ValueSequence_GenericClasses_ValueSequence_1_TDataType')
    def __getitem__(self, types : typing.Type[Generic_ValueSequence_GenericClasses_ValueSequence_1_TDataType]) -> typing.Type[ValueSequence_1[Generic_ValueSequence_GenericClasses_ValueSequence_1_TDataType]]: ...

ValueSequence : ValueSequence_GenericClasses

ValueSequence_1_TDataType = typing.TypeVar('ValueSequence_1_TDataType')
class ValueSequence_1(typing.Generic[ValueSequence_1_TDataType], NamedElementSequence_1[ValueSequence_1_TDataType]):
    @typing.overload
    def __init__(self, getOwner: Func_1[XElement], elementName: str, condition: Predicate_1[XElement]) -> None: ...
    @typing.overload
    def __init__(self, owner: XElement, elementName: str) -> None: ...
    @typing.overload
    def __init__(self, owner: XElement, elementName: str, condition: Predicate_1[XElement]) -> None: ...
    @property
    def CAEXOwner(self) -> CAEXWrapper: ...
    @property
    def Count(self) -> int: ...
    @property
    def ElementAndValues(self) -> IEnumerable_1[ValueSequence_1.ElementValue_1[ValueSequence_1_TDataType]]: ...
    @property
    def ElementName(self) -> XName: ...
    @ElementName.setter
    def ElementName(self, value: XName) -> XName: ...
    @property
    def Elements(self) -> IEnumerable_1[XElement]: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsOwnerDefined(self) -> bool: ...
    @property
    def Item(self) -> ValueSequence_1_TDataType: ...
    @Item.setter
    def Item(self, value: ValueSequence_1_TDataType) -> ValueSequence_1_TDataType: ...
    @property
    def Owner(self) -> XElement: ...
    @property
    def ValueConverter(self) -> ValueSequence_1.ElementValueConverter_2[ValueSequence_1_TDataType, ValueSequence_1_TDataType]: ...
    @ValueConverter.setter
    def ValueConverter(self, value: ValueSequence_1.ElementValueConverter_2[ValueSequence_1_TDataType, ValueSequence_1_TDataType]) -> ValueSequence_1.ElementValueConverter_2[ValueSequence_1_TDataType, ValueSequence_1_TDataType]: ...
    @property
    def Values(self) -> IEnumerable_1[ValueSequence_1_TDataType]: ...
    def Append(self, value: ValueSequence_1_TDataType) -> XElement: ...
    def At(self, index: int) -> ValueSequence_1_TDataType: ...
    def GetEnumerator(self) -> IEnumerator_1[ValueSequence_1_TDataType]: ...
    def IndexOf(self, element: XElement) -> int: ...
    def Prepend(self, value: ValueSequence_1_TDataType) -> XElement: ...

    ElementValue_GenericClasses_ValueSequence_1_TDataType = typing.TypeVar('ElementValue_GenericClasses_ValueSequence_1_TDataType')
    class ElementValue_GenericClasses(typing.Generic[ElementValue_GenericClasses_ValueSequence_1_TDataType], abc.ABCMeta):
        ElementValue_GenericClasses_ValueSequence_1_TDataType = ValueSequence_1.ElementValue_GenericClasses_ValueSequence_1_TDataType
        def __call__(self) -> ValueSequence_1.ElementValue_1[ElementValue_GenericClasses_ValueSequence_1_TDataType]: ...

    ElementValue : ElementValue_GenericClasses[ValueSequence_1_TDataType]

    ElementValue_1_TDataType = typing.TypeVar('ElementValue_1_TDataType')
    class ElementValue_1(typing.Generic[ElementValue_1_TDataType]):
        ElementValue_1_TDataType = ValueSequence_1.ElementValue_1_TDataType
        def __init__(self, el: XElement, val: ElementValue_1_TDataType) -> None: ...
        Node : XElement
        Value : ElementValue_1_TDataType


    ElementValueConverter_GenericClasses_ValueSequence_1_TDataType = typing.TypeVar('ElementValueConverter_GenericClasses_ValueSequence_1_TDataType')
    class ElementValueConverter_GenericClasses(typing.Generic[ElementValueConverter_GenericClasses_ValueSequence_1_TDataType], abc.ABCMeta):
        ElementValueConverter_GenericClasses_ValueSequence_1_TDataType = ValueSequence_1.ElementValueConverter_GenericClasses_ValueSequence_1_TDataType
        Generic_ElementValueConverter_GenericClasses_ElementValueConverter_2_T = typing.TypeVar('Generic_ElementValueConverter_GenericClasses_ElementValueConverter_2_T')
        def __getitem__(self, types : typing.Type[Generic_ElementValueConverter_GenericClasses_ElementValueConverter_2_T]) -> typing.Type[ValueSequence_1.ElementValueConverter_2[ElementValueConverter_GenericClasses_ValueSequence_1_TDataType, Generic_ElementValueConverter_GenericClasses_ElementValueConverter_2_T]]: ...

    ElementValueConverter : ElementValueConverter_GenericClasses[ValueSequence_1_TDataType]

    ElementValueConverter_2_TDataType = typing.TypeVar('ElementValueConverter_2_TDataType')
    ElementValueConverter_2_T = typing.TypeVar('ElementValueConverter_2_T')
    class ElementValueConverter_2(typing.Generic[ElementValueConverter_2_TDataType, ElementValueConverter_2_T]):
        ElementValueConverter_2_TDataType = ValueSequence_1.ElementValueConverter_2_TDataType
        ElementValueConverter_2_T = ValueSequence_1.ElementValueConverter_2_T
        def __init__(self) -> None: ...
        def GetElementValue(self, element: XElement) -> ElementValueConverter_2_T: ...
        def SetConverters(self, convertFrom: Func_2[XElement, ElementValueConverter_2_T], convertTo: Func_2[ElementValueConverter_2_T, typing.Any]) -> None: ...
        def SetElementValue(self, element: XElement, value: ElementValueConverter_2_T) -> None: ...



class VersionType(BaseElementType_1[str]):
    def __init__(self, xmlNode: XElement) -> None: ...
    @property
    def CAEXDocument(self) -> CAEXDocument: ...
    @property
    def CAEXParent(self) -> CAEXWrapper: ...
    @property
    def CAEXSequenceOfCAEXObject(self) -> ICAEXSequence: ...
    @property
    def ChangeMode(self) -> ChangeMode: ...
    @ChangeMode.setter
    def ChangeMode(self, value: ChangeMode) -> ChangeMode: ...
    @property
    def Document(self) -> XDocument: ...
    @property
    def Exists(self) -> bool: ...
    @property
    def IsDeleted(self) -> bool: ...
    @property
    def Node(self) -> XElement: ...
    @Node.setter
    def Node(self, value: XElement) -> XElement: ...
    @property
    def Owner(self) -> XElement: ...
    @Owner.setter
    def Owner(self, value: XElement) -> XElement: ...
    @property
    def TagName(self) -> str: ...
    @property
    def Value(self) -> str: ...
    @Value.setter
    def Value(self, value: str) -> str: ...

